// Script para diagnosticar por qu√© no se obtiene el nombre correcto del usuario
const axios = require('axios');

// Configuraci√≥n
const API_BASE_URL = 'https://mumpabackend-gb0iami8w-mishu-lojans-projects.vercel.app';

// Crear instancia de axios
const api = axios.create({
  baseURL: API_BASE_URL,
  timeout: 20000,
  headers: {
    'Content-Type': 'application/json'
  }
});

// Funci√≥n para verificar datos del usuario
const checkUserData = async (authToken) => {
  try {
    console.log('üë§ [DEBUG] Verificando datos del usuario...');
    
    const response = await api.get('/api/auth/profile', {
      headers: {
        'Authorization': `Bearer ${authToken}`
      }
    });
    
    console.log('‚úÖ [DEBUG] Datos del usuario obtenidos');
    console.log('üìã [DEBUG] Datos completos:', JSON.stringify(response.data.data, null, 2));
    
    return response.data.data;
  } catch (error) {
    console.error('‚ùå [DEBUG] Error obteniendo datos del usuario:', error.response?.data || error.message);
    throw error;
  }
};

// Funci√≥n para probar pregunta sobre el nombre
const testNameQuestion = async (authToken) => {
  try {
    console.log('üéØ [DEBUG] Probando pregunta sobre el nombre...');
    
    const response = await api.post('/api/doula/chat', {
      message: '¬øC√≥mo me llamo?'
    }, {
      headers: {
        'Authorization': `Bearer ${authToken}`
      }
    });
    
    console.log('‚úÖ [DEBUG] Respuesta de Douli obtenida');
    console.log('üìã [DEBUG] Fuente de respuesta:', response.data.data?.source || 'desconocida');
    console.log('üìã [DEBUG] Us√≥ fallback:', response.data.data?.usedFallback || 'desconocido');
    console.log('üìã [DEBUG] Respuesta:');
    console.log('=' .repeat(80));
    console.log(response.data.data?.response);
    console.log('=' .repeat(80));
    
    return response.data;
  } catch (error) {
    console.error('‚ùå [DEBUG] Error en pregunta sobre nombre:', error.response?.data || error.message);
    throw error;
  }
};

// Funci√≥n para verificar logs del servidor
const checkServerLogs = async () => {
  try {
    console.log('üìã [DEBUG] Verificando logs del servidor...');
    
    const response = await api.get('/health');
    
    console.log('‚úÖ [DEBUG] Servidor funcionando');
    console.log('üìã [DEBUG] Estado del servidor:', response.data);
    
    return response.data;
  } catch (error) {
    console.error('‚ùå [DEBUG] Error verificando servidor:', error.message);
    throw error;
  }
};

// Funci√≥n principal de diagn√≥stico
const runDiagnosis = async () => {
  try {
    console.log('üîç [DEBUG] Iniciando diagn√≥stico del nombre del usuario...\n');
    
    // 1. Verificar token de autenticaci√≥n
    const args = process.argv.slice(2);
    const authToken = args[0];
    
    if (!authToken) {
      console.log('‚ö†Ô∏è [DEBUG] Para diagnosticar, proporciona un token de autenticaci√≥n:');
      console.log('   node test-user-name.js tu_token_aqui');
      return;
    }
    
    // 2. Verificar estado del servidor
    console.log('=' .repeat(60));
    console.log('1. VERIFICACI√ìN DEL SERVIDOR');
    console.log('=' .repeat(60));
    await checkServerLogs();
    
    // 3. Verificar datos del usuario
    console.log('\n' + '=' .repeat(60));
    console.log('2. VERIFICACI√ìN DE DATOS DEL USUARIO');
    console.log('=' .repeat(60));
    const userData = await checkUserData(authToken);
    
    // 4. Probar pregunta sobre el nombre
    console.log('\n' + '=' .repeat(60));
    console.log('3. PRUEBA DE PREGUNTA SOBRE EL NOMBRE');
    console.log('=' .repeat(60));
    await testNameQuestion(authToken);
    
    console.log('\nüéâ [DEBUG] Diagn√≥stico completado!');
    console.log('\nüí° [DEBUG] CONCLUSIONES:');
    console.log('- Si el nombre en userData es incorrecto, hay un problema en el registro');
    console.log('- Si Douli no usa el nombre correcto, hay un problema en la l√≥gica');
    console.log('- Si usa fallback, OpenAI no est√° funcionando');
    
  } catch (error) {
    console.error('\nüí• [DEBUG] Error en el diagn√≥stico:', error.message);
  }
};

// Funci√≥n para prueba simple
const simpleTest = async (authToken) => {
  try {
    console.log('üîç [DEBUG] Prueba simple del nombre...\n');
    
    await checkUserData(authToken);
    
  } catch (error) {
    console.error('‚ùå [DEBUG] Error:', error.message);
  }
};

// Ejecutar diagn√≥stico
if (require.main === module) {
  const args = process.argv.slice(2);
  
  if (args.length === 0) {
    runDiagnosis();
  } else if (args.length === 1) {
    simpleTest(args[0]);
  }
}

// Exportar funciones
module.exports = {
  checkUserData,
  testNameQuestion,
  checkServerLogs,
  runDiagnosis,
  simpleTest
};

/*
INSTRUCCIONES DE USO:

1. Diagn√≥stico completo:
   node test-user-name.js tu_token_aqui

2. Prueba simple:
   node test-user-name.js tu_token_aqui

PROBLEMAS POSIBLES:

‚ùå "Nombre incorrecto en userData":
   - El nombre no se guard√≥ correctamente durante el registro
   - Hay un problema en el endpoint de signup
   - Los datos est√°n corruptos en Firebase

‚ùå "Douli no usa el nombre correcto":
   - Error en la l√≥gica de obtenci√≥n del nombre
   - El fallback no est√° funcionando
   - OpenAI est√° devolviendo nombre incorrecto

‚ùå "No encuentra el nombre":
   - El usuario no est√° registrado correctamente
   - Problema de permisos en Firebase
   - Error en la consulta a Firestore

SOLUCIONES:

‚úÖ Si el nombre est√° mal en userData:
   - Verificar el proceso de registro
   - Revisar el endpoint de signup
   - Actualizar el nombre en Firebase

‚úÖ Si Douli no lo usa:
   - Revisar la l√≥gica de obtenci√≥n
   - Verificar el fallback
   - Mejorar el prompt de OpenAI

‚úÖ Si no encuentra el nombre:
   - Verificar permisos de Firebase
   - Revisar la estructura de datos
   - Diagnosticar la consulta a Firestore
*/

// Script para diagnosticar el c√°lculo de edad de Java
const axios = require('axios');

// Configuraci√≥n
const API_BASE_URL = 'https://mumpabackend-lyop389dp-mishu-lojans-projects.vercel.app';

// Crear instancia de axios
const api = axios.create({
  baseURL: API_BASE_URL,
  timeout: 30000,
  headers: {
    'Content-Type': 'application/json'
  }
});

// Funci√≥n para calcular edad manualmente (igual que en el servidor)
const calculateCurrentAge = (registeredAge, registeredAt) => {
  const now = new Date();
  const registeredDate = new Date(registeredAt);
  const diffTime = now - registeredDate;
  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  const diffMonths = Math.floor(diffDays / 30.44); // Promedio de d√≠as por mes
  
  return Math.max(0, registeredAge + diffMonths);
};

// Funci√≥n para obtener informaci√≥n actualizada de hijos
const getChildrenCurrentInfo = async (authToken) => {
  try {
    console.log(`\nüìä [CURRENT] Obteniendo informaci√≥n actualizada de hijos...`);
    
    const response = await api.get('/api/auth/children/current-info', {
      headers: {
        'Authorization': `Bearer ${authToken}`
      }
    });
    
    if (response.data.success) {
      console.log(`‚úÖ [CURRENT] Informaci√≥n obtenida:`, response.data.data.children.length, 'hijos');
      return response.data.data;
    } else {
      console.log(`‚ùå [CURRENT] Error obteniendo informaci√≥n:`, response.data.message);
      return null;
    }
  } catch (error) {
    console.error(`‚ùå [CURRENT] Error:`, error.response?.data || error.message);
    return null;
  }
};

// Funci√≥n para probar desarrollo con childId
const testDevelopmentWithChildId = async (authToken, childId, childName) => {
  try {
    console.log(`\nü§ñ [DEVELOPMENT] Probando desarrollo con childId: ${childId}`);
    
    const response = await api.post('/api/children/development-info', {
      childId: childId
    }, {
      headers: {
        'Authorization': `Bearer ${authToken}`
      }
    });
    
    if (response.data.success) {
      const data = response.data.data;
      console.log(`‚úÖ [DEVELOPMENT] Desarrollo obtenido para ${childName}:`);
      console.log(`   üìä Edad registrada: ${data.registeredAge || 'N/A'}`);
      console.log(`   üìä Edad actual: ${data.isUnborn ? data.gestationWeeks + ' semanas' : data.ageInMonths + ' meses'}`);
      console.log(`   üìà D√≠as desde registro: ${data.daysSinceRegistration || 'N/A'}`);
      console.log(`   üîÑ Calculado autom√°ticamente: ${data.calculatedAge ? 'S√≠' : 'No'}`);
      
      return data;
    } else {
      console.log(`‚ùå [DEVELOPMENT] Error obteniendo desarrollo:`, response.data.message);
      return null;
    }
  } catch (error) {
    console.error(`‚ùå [DEVELOPMENT] Error:`, error.response?.data || error.message);
    return null;
  }
};

// Funci√≥n para diagnosticar el c√°lculo de edad de Java
const diagnoseJavaAge = async (authToken) => {
  try {
    console.log('üîç [DIAGNOSE] Diagnosticando c√°lculo de edad de Java...\n');
    
    // 1. Obtener informaci√≥n actualizada de todos los hijos
    const currentInfo = await getChildrenCurrentInfo(authToken);
    if (!currentInfo) {
      console.log('‚ùå No se pudo obtener informaci√≥n de hijos');
      return;
    }
    
    // 2. Buscar Java espec√≠ficamente
    const java = currentInfo.children.find(child => child.name === 'Java');
    if (!java) {
      console.log('‚ùå No se encontr√≥ Java en la lista de hijos');
      return;
    }
    
    console.log('=' .repeat(60));
    console.log('DIAGN√ìSTICO DE JAVA');
    console.log('=' .repeat(60));
    
    // 3. Mostrar informaci√≥n detallada
    console.log(`\nüë∂ Nombre: ${java.name}`);
    console.log(`üìÖ Fecha de registro: ${new Date(java.registeredDate).toLocaleDateString()}`);
    console.log(`üìÖ Fecha actual: ${new Date().toLocaleDateString()}`);
    console.log(`üìä Edad registrada: ${java.registeredAgeInMonths} meses`);
    console.log(`üìä Edad actual (servidor): ${java.currentAgeInMonths} meses`);
    console.log(`üìà D√≠as desde registro: ${java.daysSinceRegistration} d√≠as`);
    
    // 4. Calcular manualmente para comparar
    const manualCalculation = calculateCurrentAge(java.registeredAgeInMonths, java.registeredDate);
    console.log(`üßÆ Edad calculada manualmente: ${manualCalculation} meses`);
    
    // 5. Verificar si hay diferencia
    if (java.currentAgeInMonths !== manualCalculation) {
      console.log(`‚ö†Ô∏è DISCREPANCIA DETECTADA:`);
      console.log(`   - Servidor dice: ${java.currentAgeInMonths} meses`);
      console.log(`   - C√°lculo manual: ${manualCalculation} meses`);
      console.log(`   - Diferencia: ${Math.abs(java.currentAgeInMonths - manualCalculation)} meses`);
    } else {
      console.log(`‚úÖ C√°lculo correcto: ${java.currentAgeInMonths} meses`);
    }
    
    // 6. Mostrar detalles del c√°lculo
    const now = new Date();
    const registeredDate = new Date(java.registeredDate);
    const diffTime = now - registeredDate;
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    const diffMonths = Math.floor(diffDays / 30.44);
    
    console.log(`\nüìä DETALLES DEL C√ÅLCULO:`);
    console.log(`   Fecha de registro: ${registeredDate.toISOString()}`);
    console.log(`   Fecha actual: ${now.toISOString()}`);
    console.log(`   Diferencia en milisegundos: ${diffTime}`);
    console.log(`   Diferencia en d√≠as: ${diffDays}`);
    console.log(`   Diferencia en meses: ${diffMonths}`);
    console.log(`   Edad registrada: ${java.registeredAgeInMonths} meses`);
    console.log(`   Edad calculada: ${java.registeredAgeInMonths} + ${diffMonths} = ${java.registeredAgeInMonths + diffMonths} meses`);
    
    // 7. Probar desarrollo con childId
    console.log('\n' + '=' .repeat(60));
    console.log('PRUEBA DE DESARROLLO CON CHILDID');
    console.log('=' .repeat(60));
    
    const developmentInfo = await testDevelopmentWithChildId(authToken, java.id, java.name);
    
    if (developmentInfo) {
      console.log(`\nüìä RESULTADO DEL DESARROLLO:`);
      console.log(`   Edad usada: ${developmentInfo.ageInMonths} meses`);
      console.log(`   Edad registrada: ${developmentInfo.registeredAge} meses`);
      console.log(`   D√≠as desde registro: ${developmentInfo.daysSinceRegistration} d√≠as`);
      
      if (developmentInfo.ageInMonths !== java.currentAgeInMonths) {
        console.log(`‚ö†Ô∏è DISCREPANCIA EN DESARROLLO:`);
        console.log(`   - Informaci√≥n actualizada: ${java.currentAgeInMonths} meses`);
        console.log(`   - Desarrollo usado: ${developmentInfo.ageInMonths} meses`);
      } else {
        console.log(`‚úÖ Desarrollo usa edad correcta: ${developmentInfo.ageInMonths} meses`);
      }
    }
    
    // 8. Resumen
    console.log('\n' + '=' .repeat(60));
    console.log('RESUMEN DEL DIAGN√ìSTICO');
    console.log('=' .repeat(60));
    
    console.log(`‚úÖ Java encontrado: ${java.name}`);
    console.log(`‚úÖ Edad registrada: ${java.registeredAgeInMonths} meses`);
    console.log(`‚úÖ Edad actual calculada: ${java.currentAgeInMonths} meses`);
    console.log(`‚úÖ D√≠as transcurridos: ${java.daysSinceRegistration} d√≠as`);
    console.log(`‚úÖ C√°lculo manual: ${manualCalculation} meses`);
    
    if (java.currentAgeInMonths === manualCalculation) {
      console.log(`‚úÖ El c√°lculo est√° funcionando correctamente`);
    } else {
      console.log(`‚ùå Hay un problema en el c√°lculo`);
    }
    
  } catch (error) {
    console.error('\nüí• [DIAGNOSE] Error en el diagn√≥stico:', error.message);
  }
};

// Funci√≥n principal
const runDiagnosis = async () => {
  try {
    console.log('üîç [AGE DIAGNOSIS] Iniciando diagn√≥stico del c√°lculo de edad...\n');
    
    // 1. Verificar token de autenticaci√≥n
    const args = process.argv.slice(2);
    const authToken = args[0];
    
    if (!authToken) {
      console.log('‚ö†Ô∏è [AGE DIAGNOSIS] Para ejecutar el diagn√≥stico, proporciona un token de autenticaci√≥n:');
      console.log('   node debug-age-calculation.js tu_token_aqui');
      return;
    }
    
    // 2. Ejecutar diagn√≥stico
    await diagnoseJavaAge(authToken);
    
  } catch (error) {
    console.error('\nüí• [AGE DIAGNOSIS] Error en el diagn√≥stico:', error.message);
  }
};

// Ejecutar diagn√≥stico
if (require.main === module) {
  runDiagnosis();
}

// Exportar funciones
module.exports = {
  calculateCurrentAge,
  getChildrenCurrentInfo,
  testDevelopmentWithChildId,
  diagnoseJavaAge,
  runDiagnosis
};

/*
INSTRUCCIONES DE USO:

1. Ejecutar diagn√≥stico completo:
   node debug-age-calculation.js tu_token_aqui

2. Ejecutar funci√≥n espec√≠fica:
   const { diagnoseJavaAge } = require('./debug-age-calculation');
   diagnoseJavaAge(token);

DIAGN√ìSTICO INCLUIDO:

‚úÖ Obtener informaci√≥n actualizada de Java
‚úÖ Calcular edad manualmente para comparar
‚úÖ Verificar discrepancias en el c√°lculo
‚úÖ Probar desarrollo con childId
‚úÖ Mostrar detalles del c√°lculo
‚úÖ Resumen del diagn√≥stico

RESULTADO:

Identifica si hay problemas en el c√°lculo
autom√°tico de la edad de Java.
*/

// Cargar variables de entorno desde archivo .env
require('dotenv').config();

// Funci√≥n para validar URL
const isValidUrl = (string) => {
  try {
    new URL(string);
    return true;
  } catch (_) {
    return false;
  }
};

const express = require('express');
const cors = require('cors');
const multer = require('multer');
const path = require('path');
const OpenAI = require('openai');

const app = express();
const PORT = process.env.PORT || 3000;

// Configuraci√≥n de CORS mejorada
app.use(cors({
  origin: process.env.NODE_ENV === 'production' 
    ? ['https://munpa.online', 'https://www.munpa.online'] 
    : ['http://localhost:3000', 'http://localhost:3001', 'http://localhost:5173', 'http://localhost:8081', 'http://localhost:19006'],
  credentials: true,
  allowedHeaders: ['Content-Type', 'Authorization', 'Accept', 'X-Requested-With'],
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  preflightContinue: false,
  optionsSuccessStatus: 204
}));

app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// Configuraci√≥n de multer para subida de archivos en memoria (compatible con Vercel)
const upload = multer({ 
  storage: multer.memoryStorage(), // Usar memoria en lugar de disco
  limits: {
    fileSize: 5 * 1024 * 1024 // 5MB m√°ximo
  },
  fileFilter: function (req, file, cb) {
    // Solo permitir im√°genes
    if (file.mimetype.startsWith('image/')) {
      cb(null, true);
    } else {
      cb(new Error('Solo se permiten archivos de imagen'), false);
    }
  }
});

// Middleware para manejar peticiones OPTIONS (preflight)
app.options('*', cors());

// Middleware de logging
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`);
  console.log('üìã Headers recibidos:', req.headers);
  next();
});

// Configurar Firebase usando el archivo JSON
let auth = null;
let db = null;
let admin = null;
let FieldValue = null;
let firebaseStatus = 'No inicializado';

// Configurar OpenAI
let openai = null;
let openaiStatus = 'No inicializado';

// Middleware de autenticaci√≥n (declarado antes de su uso)
const authenticateToken = async (req, res, next) => {
  try {
    console.log('üîç [AUTH] Iniciando verificaci√≥n de token para:', req.path);
    
    if (!auth) {
      console.log('‚ùå [AUTH] Firebase no est√° configurado');
      return res.status(500).json({
        success: false,
        message: 'Firebase no est√° configurado'
      });
    }
    
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];

    if (!token) {
      console.log('‚ùå [AUTH] No se encontr√≥ token en headers');
      return res.status(401).json({
        success: false,
        message: 'Token de acceso requerido'
      });
    }

    console.log('üîë [AUTH] Token encontrado, longitud:', token.length);

    try {
      // PRIMERO intentar extraer uid del customToken JWT
      console.log('üîÑ [AUTH] Intentando extraer UID del customToken...');
      const tokenParts = token.split('.');
      
      if (tokenParts.length === 3) {
        try {
          const payload = JSON.parse(Buffer.from(tokenParts[1], 'base64').toString());
          console.log('üîç [AUTH] Payload del token:', payload);
          
          if (payload.uid) {
            console.log('‚úÖ [AUTH] UID extra√≠do del customToken:', payload.uid);
            
            req.user = { uid: payload.uid };
            console.log('‚úÖ [AUTH] req.user configurado:', req.user);
            next();
            return;
          }
        } catch (decodeError) {
          console.log('‚ùå [AUTH] Error decodificando customToken:', decodeError.message);
        }
      }
      
      // SEGUNDO intentar como idToken
      console.log('üîÑ [AUTH] Intentando verificar como idToken...');
      const decodedIdToken = await auth.verifyIdToken(token);
      console.log('‚úÖ [AUTH] IdToken verificado exitosamente');
      
      req.user = decodedIdToken;
      console.log('‚úÖ [AUTH] req.user configurado:', req.user);
      next();
      
    } catch (idTokenError) {
      console.log('‚ùå [AUTH] Error verificando idToken:', idTokenError.message);
      return res.status(403).json({
        success: false,
        message: 'Token inv√°lido o expirado'
      });
    }
  } catch (error) {
    console.error('‚ùå [AUTH] Error general en autenticaci√≥n:', error);
    return res.status(403).json({
      success: false,
      message: 'Token inv√°lido o expirado'
    });
  }
};

const setupFirebase = () => {
  try {
    console.log('üî• Configurando Firebase con variables de entorno...');
    
    admin = require('firebase-admin');
    
    // Verificar que las variables de entorno est√©n disponibles
    const requiredEnvVars = [
      'FIREBASE_TYPE',
      'FIREBASE_PROJECT_ID',
      'FIREBASE_PRIVATE_KEY_ID',
      'FIREBASE_PRIVATE_KEY',
      'FIREBASE_CLIENT_EMAIL',
      'FIREBASE_CLIENT_ID',
      'FIREBASE_AUTH_URI',
      'FIREBASE_TOKEN_URI',
      'FIREBASE_AUTH_PROVIDER_X509_CERT_URL',
      'FIREBASE_CLIENT_X509_CERT_URL'
    ];

    const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);
    
    if (missingVars.length > 0) {
      throw new Error(`Variables de entorno faltantes: ${missingVars.join(', ')}`);
    }

    // Crear objeto de configuraci√≥n desde variables de entorno
    const serviceAccount = {
      type: process.env.FIREBASE_TYPE,
      project_id: process.env.FIREBASE_PROJECT_ID,
      private_key_id: process.env.FIREBASE_PRIVATE_KEY_ID,
      private_key: process.env.FIREBASE_PRIVATE_KEY
        .replace(/\\n/g, '\n')
        .replace(/"/g, '')
        .trim(),
      client_email: process.env.FIREBASE_CLIENT_EMAIL,
      client_id: process.env.FIREBASE_CLIENT_ID,
      auth_uri: process.env.FIREBASE_AUTH_URI,
      token_uri: process.env.FIREBASE_TOKEN_URI,
      auth_provider_x509_cert_url: process.env.FIREBASE_AUTH_PROVIDER_X509_CERT_URL,
      client_x509_cert_url: process.env.FIREBASE_CLIENT_X509_CERT_URL
    };
    
    console.log('‚úÖ Variables de entorno cargadas correctamente');

    // Inicializar Firebase
    if (!admin.apps.length) {
      admin.initializeApp({
        credential: admin.credential.cert(serviceAccount),
        storageBucket: 'mumpabackend.firebasestorage.app'
      });
      console.log('‚úÖ Firebase Admin inicializado con Storage Bucket: mumpabackend.firebasestorage.app');
    } else {
      console.log('‚úÖ Firebase Admin ya estaba inicializado');
    }
    
    auth = admin.auth();
    db = admin.firestore();
    FieldValue = admin.firestore.FieldValue;
    
    console.log('‚úÖ Firebase Auth y Firestore configurados');
    firebaseStatus = 'Configurado correctamente';
    return true;
  } catch (error) {
    console.error('‚ùå Error configurando Firebase:', error.message);
    firebaseStatus = `Error: ${error.message}`;
    return false;
  }
};

// Funci√≥n para generar respuestas de doula predefinidas
const generateDoulaResponse = (message, userContext, childrenInfo, userName = 'Mam√°') => {
  const lowerMessage = message.toLowerCase();
  
  // Detectar temas fuera del √°mbito de doula
  const offTopicKeywords = [
    'programaci√≥n', 'c√≥digo', 'javascript', 'python', 'html', 'css', 'desarrollo', 'app', 'software',
    'finanzas', 'dinero', 'inversi√≥n', 'banco', 'cr√©dito', 'pr√©stamo', 'econom√≠a',
    'derecho', 'ley', 'legal', 'abogado', 'contrato', 'tr√°mite',
    'medicina', 'diagn√≥stico', 'radiolog√≠a', 'rayos x', 'an√°lisis', 'medicamento', 'receta',
    'tecnolog√≠a', 'computadora', 'celular', 'internet', 'redes sociales',
    'cocina', 'receta', 'comida', 'restaurante', 'cocinar',
    'deportes', 'f√∫tbol', 'basketball', 'gimnasio', 'ejercicio f√≠sico',
    'pol√≠tica', 'elecciones', 'gobierno', 'presidente',
    'viajes', 'turismo', 'hotel', 'avi√≥n', 'vacaciones'
  ];
  
  const isOffTopic = offTopicKeywords.some(keyword => lowerMessage.includes(keyword));
  
  if (isOffTopic) {
    return `Soy Douli, tu asistente de Munpa especializada en acompa√±amiento durante el embarazo, parto y crianza temprana.

ü§± **Mi especialidad es:**
‚Ä¢ Embarazo y preparaci√≥n al parto
‚Ä¢ Lactancia y cuidados del beb√©
‚Ä¢ Apoyo emocional para familias
‚Ä¢ Se√±ales de alarma y cu√°ndo consultar

üìû **Para tu consulta sobre ${message}, te recomiendo:**
‚Ä¢ Consultar con un profesional especializado
‚Ä¢ Buscar informaci√≥n en fuentes oficiales
‚Ä¢ Contactar servicios espec√≠ficos para ese tema

¬øHay algo relacionado con tu embarazo, parto o crianza en lo que pueda ayudarte? üíù`;
  }
  
  // Extraer informaci√≥n de los hijos del contexto
  let childrenContext = '';
  let hasUnbornChildren = false;
  let hasYoungChildren = false;
  let hasMultipleChildren = false;
  let childrenNames = [];
  let unbornChildrenNames = [];
  let youngChildrenNames = [];
  
  if (childrenInfo) {
    const childrenMatch = childrenInfo.match(/Hijos nacidos: (\d+)/);
    const unbornMatch = childrenInfo.match(/Hijos por nacer: (\d+)/);
    
    if (childrenMatch && unbornMatch) {
      const bornCount = parseInt(childrenMatch[1]);
      const unbornCount = parseInt(unbornMatch[1]);
      
      hasUnbornChildren = unbornCount > 0;
      hasMultipleChildren = (bornCount + unbornCount) > 1;
      
      // Extraer nombres de los hijos
      const nameMatches = childrenInfo.matchAll(/- ([^:]+):/g);
      for (const match of nameMatches) {
        const name = match[1].trim();
        childrenNames.push(name);
        
        // Determinar si es hijo por nacer o nacido
        const lineAfterName = childrenInfo.substring(match.index).split('\n')[0];
        if (lineAfterName.includes('Por nacer')) {
          unbornChildrenNames.push(name);
        } else if (lineAfterName.includes('mes') || lineAfterName.includes('a√±o')) {
          youngChildrenNames.push(name);
        }
      }
      
      // Determinar si tiene hijos peque√±os (menos de 3 a√±os)
      if (childrenInfo.includes('mes') || childrenInfo.includes('a√±o')) {
        hasYoungChildren = true;
      }
    }
  }
  
  // Respuestas para s√≠ntomas del primer trimestre
  if (lowerMessage.includes('s√≠ntoma') || lowerMessage.includes('primer trimestre') || lowerMessage.includes('n√°usea')) {
    let personalizedIntro = `Soy Douli, tu asistente de Munpa. Te puedo ayudar con los s√≠ntomas del primer trimestre.`;
    
    if (hasUnbornChildren) {
      const unbornNames = unbornChildrenNames.join(' y ');
      personalizedIntro += ` Veo que tienes a ${unbornNames} en camino, ¬°qu√© emoci√≥n!`;
    } else if (hasYoungChildren) {
      const youngNames = youngChildrenNames.join(' y ');
      personalizedIntro += ` Como ya has pasado por esto antes con ${youngNames}, sabes que cada embarazo es diferente.`;
    } else if (hasMultipleChildren) {
      const allNames = childrenNames.join(' y ');
      personalizedIntro += ` Con tu experiencia como madre de ${allNames}, sabes que cada embarazo tiene sus particularidades.`;
    }
    
    return `${personalizedIntro}

ü§∞ **S√≠ntomas normales:**
‚Ä¢ N√°useas matutinas
‚Ä¢ Fatiga
‚Ä¢ Sensibilidad en senos
‚Ä¢ Cambios de humor

üí° **Para las n√°useas:**
‚Ä¢ Come poco y frecuente
‚Ä¢ Galletas saladas en la cama
‚Ä¢ Bebe mucha agua
‚Ä¢ Evita comidas grasosas

‚ö†Ô∏è **Consulta al m√©dico si:**
‚Ä¢ N√°useas muy intensas
‚Ä¢ Fiebre alta
‚Ä¢ Sangrado

¬øQu√© s√≠ntoma te preocupa m√°s?`;
  }
  
  // Respuestas para ejercicios durante el embarazo
  if (lowerMessage.includes('ejercicio') || lowerMessage.includes('actividad f√≠sica') || lowerMessage.includes('deporte')) {
    return `¬°Excelente pregunta! Soy Douli, tu asistente de Munpa. Te recomiendo mantenerte activa durante el embarazo, pero con precauci√≥n:

üèÉ‚Äç‚ôÄÔ∏è **Ejercicios seguros durante el embarazo:**
‚Ä¢ Caminar (30 minutos diarios)
‚Ä¢ Yoga prenatal
‚Ä¢ Nataci√≥n
‚Ä¢ Pilates adaptado
‚Ä¢ Ejercicios de Kegel
‚Ä¢ Estiramientos suaves

‚ö†Ô∏è **Ejercicios a evitar:**
‚Ä¢ Deportes de contacto
‚Ä¢ Ejercicios que requieran acostarse boca arriba despu√©s del primer trimestre
‚Ä¢ Actividades con riesgo de ca√≠da
‚Ä¢ Levantar pesos pesados

üí° **Consejos importantes:**
‚Ä¢ Escucha a tu cuerpo
‚Ä¢ Mant√©n una respiraci√≥n constante
‚Ä¢ Bebe mucha agua
‚Ä¢ Detente si sientes dolor o mareos
‚Ä¢ Consulta con tu m√©dico antes de comenzar

¬øQu√© tipo de actividad f√≠sica te gustar√≠a practicar?`;
  }
  
  // Respuestas para preparaci√≥n al parto
  if (lowerMessage.includes('parto') || lowerMessage.includes('dar a luz') || lowerMessage.includes('preparar')) {
    return `¬°Qu√© emoci√≥n! Soy Douli, tu asistente de Munpa.

ü§± **Preparaci√≥n f√≠sica:**
‚Ä¢ Ejercicios de respiraci√≥n
‚Ä¢ T√©cnicas de relajaci√≥n
‚Ä¢ Fortalece suelo p√©lvico
‚Ä¢ Buena postura

üßò‚Äç‚ôÄÔ∏è **Preparaci√≥n mental:**
‚Ä¢ Lee sobre el parto
‚Ä¢ Visualiza tu parto ideal
‚Ä¢ Practica meditaci√≥n
‚Ä¢ Conf√≠a en tu cuerpo

üìã **Preparaci√≥n pr√°ctica:**
‚Ä¢ Maleta para hospital
‚Ä¢ Plan de parto
‚Ä¢ Apoyo postparto
‚Ä¢ Todo listo en casa

¬øEn qu√© aspecto necesitas ayuda?`;
  }
  
  // Respuestas para lactancia
  if (lowerMessage.includes('lactancia') || lowerMessage.includes('amamantar') || lowerMessage.includes('leche materna')) {
    return `¬°La lactancia es maravillosa! Soy Douli, tu asistente de Munpa.

ü§± **Beneficios:**
‚Ä¢ Nutrici√≥n perfecta
‚Ä¢ Fortalece sistema inmune
‚Ä¢ Crea v√≠nculo especial
‚Ä¢ Ayuda recuperaci√≥n

üí° **Consejos:**
‚Ä¢ Contacto piel con piel
‚Ä¢ Amamanta a demanda
‚Ä¢ Buen agarre
‚Ä¢ Posici√≥n c√≥moda

‚ö†Ô∏è **Alerta si:**
‚Ä¢ Dolor intenso
‚Ä¢ Grietas en pezones
‚Ä¢ Fiebre
‚Ä¢ Beb√© no gana peso

¬øQu√© te preocupa espec√≠ficamente?`;
  }
  
  // Respuestas para alimentaci√≥n durante el embarazo
  if (lowerMessage.includes('comida') || lowerMessage.includes('alimentaci√≥n') || lowerMessage.includes('dieta') || lowerMessage.includes('nutrici√≥n')) {
    return `¬°La nutrici√≥n es fundamental! Soy Douli, tu asistente de Munpa.

ü•ó **Come:**
‚Ä¢ Frutas y verduras
‚Ä¢ Prote√≠nas magras
‚Ä¢ Granos enteros
‚Ä¢ L√°cteos bajos en grasa

‚ö†Ô∏è **Evita:**
‚Ä¢ Pescado alto en mercurio
‚Ä¢ Carne cruda
‚Ä¢ Quesos sin pasteurizar
‚Ä¢ Alcohol y cafe√≠na

üí° **Consejos:**
‚Ä¢ 5-6 comidas peque√±as
‚Ä¢ 8-10 vasos de agua
‚Ä¢ Vitaminas prenatales
‚Ä¢ Escucha tu cuerpo

¬øQu√© alimento te preocupa?`;
  }
  
  // Respuestas para el postparto
  if (lowerMessage.includes('postparto') || lowerMessage.includes('despu√©s del parto') || lowerMessage.includes('recuperaci√≥n')) {
    return `¬°El postparto es un per√≠odo muy importante! Soy Douli, tu asistente de Munpa. Te preparo para esta etapa:

ü§± **Primeras semanas postparto:**
‚Ä¢ Descansa cuando el beb√© duerma
‚Ä¢ Pide ayuda a familiares y amigos
‚Ä¢ Come alimentos nutritivos
‚Ä¢ Bebe mucha agua
‚Ä¢ No te presiones por "volver a la normalidad"

üíô **Cuidado emocional:**
‚Ä¢ Es normal sentir emociones intensas
‚Ä¢ Habla sobre tus sentimientos
‚Ä¢ Busca apoyo si te sientes abrumada
‚Ä¢ No te compares con otras madres
‚Ä¢ Celebra cada peque√±o logro

üè• **Alerta si:**
‚Ä¢ Fiebre alta
‚Ä¢ Sangrado excesivo
‚Ä¢ Dolor intenso
‚Ä¢ Tristeza profunda

üí° **Consejos:**
‚Ä¢ Comidas preparadas
‚Ä¢ Organiza visitas
‚Ä¢ Acepta ayuda
‚Ä¢ No te olvides de ti

¬øC√≥mo te sientes?`;
  }
  
  // Verificar si pregunta por un hijo espec√≠fico o sobre edades
  const askedChildName = childrenNames.find(name => 
    lowerMessage.includes(name.toLowerCase())
  );
  
  // Verificar si pregunta sobre edad espec√≠fica
  if (askedChildName && (lowerMessage.includes('a√±o') || lowerMessage.includes('edad') || lowerMessage.includes('cu√°nto') || lowerMessage.includes('cuantos'))) {
    // Buscar la informaci√≥n espec√≠fica del hijo en childrenInfo
    const childLine = childrenInfo.split('\n').find(line => line.includes(askedChildName));
    
    if (childLine) {
      if (childLine.includes('Por nacer')) {
        const gestationMatch = childLine.match(/\((\d+) semanas de gestaci√≥n\)/);
        const weeks = gestationMatch ? gestationMatch[1] : 'desconocidas';
        return `Soy Douli, tu asistente de Munpa. 

ü§± **${askedChildName}:**
${askedChildName} est√° por nacer (${weeks} semanas de gestaci√≥n).

üí° **Pr√≥ximos pasos:**
‚Ä¢ Prepara la maleta para el hospital
‚Ä¢ Ten todo listo en casa
‚Ä¢ Practica t√©cnicas de respiraci√≥n

¬øNecesitas ayuda con la preparaci√≥n?`;
      } else {
        // Extraer edad del texto
        const ageMatch = childLine.match(/: (.+?) de edad/);
        if (ageMatch) {
          const age = ageMatch[1];
          return `Soy Douli, tu asistente de Munpa. 

üë∂ **${askedChildName}:**
${askedChildName} tiene ${age}.

üí° **Consejos para esta edad:**
‚Ä¢ Mant√©n rutinas estables
‚Ä¢ Celebra sus logros
‚Ä¢ Dedica tiempo individual

¬øQu√© aspecto espec√≠fico te preocupa?`;
        }
      }
    }
  }
  
  // Verificar si pregunta por un hijo espec√≠fico (sin edad)
  if (askedChildName) {
    const isUnborn = unbornChildrenNames.includes(askedChildName);
    const isYoung = youngChildrenNames.includes(askedChildName);
    
    if (isUnborn) {
      return `Soy Douli, tu asistente de Munpa.

ü§± **${askedChildName}:**
${askedChildName} est√° por nacer.

üí° **Preparaci√≥n:**
‚Ä¢ Todo listo para su llegada
‚Ä¢ Prepara a tus otros hijos
‚Ä¢ Maleta para hospital
‚Ä¢ T√©cnicas de respiraci√≥n

¬øQu√© necesitas saber espec√≠ficamente?`;
    } else if (isYoung) {
      return `Soy Douli, tu asistente de Munpa.

üë∂ **${askedChildName}:**
${askedChildName} est√° en etapa de desarrollo.

üí° **Consejos:**
‚Ä¢ Rutina estable
‚Ä¢ Tiempo individual
‚Ä¢ Celebra logros
‚Ä¢ Paciencia

¬øQu√© te preocupa espec√≠ficamente?`;
    } else {
      return `Soy Douli, tu asistente de Munpa.

üë∂ **${askedChildName}:**
${askedChildName} es parte de tu familia.

üí° **Consejos:**
‚Ä¢ Necesidades √∫nicas
‚Ä¢ Tiempo individual
‚Ä¢ Celebra logros
‚Ä¢ Comunicaci√≥n abierta

¬øQu√© necesitas saber?`;
    }
  }
  
  // Respuesta general para cualquier otra pregunta
  let personalizedIntro = `Soy Douli, tu asistente de Munpa.`;
  
  if (hasUnbornChildren) {
    const unbornNames = unbornChildrenNames.join(' y ');
    personalizedIntro += ` Veo que tienes a ${unbornNames} en camino. ¬°Qu√© momento tan especial!`;
  } else if (hasYoungChildren) {
    const youngNames = youngChildrenNames.join(' y ');
    personalizedIntro += ` Como madre experimentada con ${youngNames}, sabes que cada d√≠a trae nuevos aprendizajes.`;
  } else if (hasMultipleChildren) {
    const allNames = childrenNames.join(' y ');
    personalizedIntro += ` Con tu experiencia criando a ${allNames}, eres una madre sabia.`;
  } else {
    personalizedIntro += ` Estoy aqu√≠ para acompa√±arte en este hermoso viaje del embarazo y la maternidad.`;
  }
  
  // Respuestas para preguntas sobre el nombre del usuario
  if (lowerMessage.includes('nombre') || lowerMessage.includes('llamas') || lowerMessage.includes('sabes mi nombre')) {
    return `¬°Hola ${userName}! Soy Douli, tu asistente de Munpa.

üíù **Sobre tu nombre:**
Tu nombre es ${userName} y es hermoso. Me encanta poder llamarte por tu nombre para hacer nuestra conversaci√≥n m√°s personal y cercana.

ü§± **Como tu asistente:**
Estoy aqu√≠ para acompa√±arte en tu viaje de maternidad, ${userName}. Puedo ayudarte con consejos sobre embarazo, parto, lactancia y crianza.

¬øEn qu√© puedo ayudarte hoy ${userName}?`;
  }
  
  // Respuestas para preguntas generales sobre hijos
  if (lowerMessage.includes('hijo') || lowerMessage.includes('hijos') || lowerMessage.includes('cu√°ntos') || lowerMessage.includes('nombres')) {
    if (childrenNames.length > 0) {
      const bornChildren = childrenNames.filter(name => !unbornChildrenNames.includes(name));
      const unbornChildren = unbornChildrenNames;
      
      let response = `Soy Douli, tu asistente de Munpa. 

üë∂ **Tu familia:**
Tienes ${childrenNames.length} hijo${childrenNames.length > 1 ? 's' : ''}.`;

      if (bornChildren.length > 0) {
        response += `\n\nüë∂ **Nacidos:**
${bornChildren.map(name => `‚Ä¢ ${name}`).join('\n')}`;
      }
      
      if (unbornChildren.length > 0) {
        response += `\n\nü§± **Por nacer:**
${unbornChildren.map(name => `‚Ä¢ ${name}`).join('\n')}`;
      }
      
      response += `\n\nüí° **Puedo ayudarte con:**
‚Ä¢ Consejos espec√≠ficos por edad
‚Ä¢ Preparaci√≥n para nuevos beb√©s
‚Ä¢ Manejo de m√∫ltiples hijos

¬øSobre cu√°l necesitas ayuda?`;
      
      return response;
    } else {
      return `¬°Hola ${userName}! Soy Douli, tu asistente de Munpa. 

üë∂ **Sobre tu familia:**
Actualmente no tienes hijos registrados en el sistema, pero estoy aqu√≠ para acompa√±arte en tu viaje hacia la maternidad.

üíù **Puedo ayudarte con:**
‚Ä¢ Preparaci√≥n para el embarazo
‚Ä¢ Informaci√≥n sobre el parto
‚Ä¢ Cuidado postparto
‚Ä¢ Lactancia materna
‚Ä¢ Apoyo emocional

¬øTe gustar√≠a que te ayude con alg√∫n tema espec√≠fico ${userName}?`;
    }
  }
  
  return `${personalizedIntro}

üí° **Puedo ayudarte con:**
‚Ä¢ Embarazo y parto
‚Ä¢ Lactancia
‚Ä¢ Cuidado postparto
‚Ä¢ Apoyo emocional
${hasMultipleChildren ? '‚Ä¢ M√∫ltiples hijos' : ''}
${hasYoungChildren ? '‚Ä¢ Ni√±os peque√±os' : ''}
${hasUnbornChildren ? '‚Ä¢ Preparaci√≥n beb√©' : ''}

¬øEn qu√© necesitas ayuda espec√≠ficamente ${userName}?`;
};

// Funci√≥n para configurar OpenAI
const setupOpenAI = () => {
  try {
    console.log('ü§ñ Configurando OpenAI...');
    
    if (!process.env.OPENAI_API_KEY) {
      console.log('‚ö†Ô∏è OPENAI_API_KEY no est√° configurada - OpenAI ser√° opcional');
      openaiStatus = 'No configurado (opcional)';
      return false;
    }

    openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY
    });
    
    console.log('‚úÖ OpenAI configurado correctamente');
    openaiStatus = 'Configurado correctamente';
    return true;
  } catch (error) {
    console.error('‚ùå Error configurando OpenAI:', error.message);
    openaiStatus = `Error: ${error.message}`;
    return false;
  }
};

// Inicializar Firebase
const firebaseReady = setupFirebase();

// Inicializar OpenAI
const openaiReady = setupOpenAI();

// Ruta de salud
app.get('/health', (req, res) => {
  res.json({
    success: true,
    message: 'Servidor funcionando correctamente',
    timestamp: new Date().toISOString(),
    environment: process.env.NODE_ENV || 'development',
    firebase: {
      status: firebaseStatus,
      ready: firebaseReady,
      hasAuth: !!auth,
      hasDb: !!db,
      hasAdmin: !!admin,
      hasStorage: !!(admin && admin.storage)
    },
    openai: {
      status: openaiStatus,
      ready: openaiReady,
      hasClient: !!openai
    }
  });
});

// Endpoint de la Doula Virtual
app.post('/api/doula/chat', authenticateToken, async (req, res) => {
  try {
    const { uid } = req.user;
    const { message, context } = req.body;

    if (!message) {
      return res.status(400).json({
        success: false,
        message: 'El mensaje es requerido'
      });
    }

    // Verificar que OpenAI est√© configurado
    if (!openai) {
      return res.status(500).json({
        success: false,
        message: 'Servicio de IA no disponible'
      });
    }

    // Obtener informaci√≥n del usuario y sus hijos para contexto personalizado
    let userContext = '';
    let childrenInfo = '';
    let userName = '';
    let userMemory = null;
    let relevantKnowledge = [];
    
    if (db) {
      try {
        // Obtener datos del usuario desde Firestore
        const userDoc = await db.collection('users').doc(uid).get();
        if (userDoc.exists) {
          const userData = userDoc.data();
          // Obtener nombre del usuario
          userName = userData.displayName || userData.name || 'Mam√°';
          
          // Si no hay nombre en Firestore, intentar obtenerlo de Firebase Auth
          if (!userName || userName === 'Mam√°') {
            try {
              const authUser = await auth.getUser(uid);
              userName = authUser.displayName || authUser.email?.split('@')[0] || 'Mam√°';
              console.log('üìã [DOULA] Nombre obtenido de Firebase Auth:', {
                authDisplayName: authUser.displayName,
                authEmail: authUser.email,
                userNameFinal: userName
              });
            } catch (authError) {
              console.log('‚ö†Ô∏è [DOULA] No se pudo obtener nombre de Firebase Auth:', authError.message);
            }
          }
          console.log('üìã [DOULA] Nombre del usuario obtenido:', {
            displayName: userData.displayName,
            name: userData.name,
            userNameFinal: userName,
            userDataKeys: Object.keys(userData)
          });
          
          // Obtener memoria del usuario
          userMemory = await getUserMemory(uid);
          
          // Determinar filtros para el conocimiento basado en el contexto del usuario
          let knowledgeFilters = { language: 'es' };
          if (userData.isPregnant) {
            knowledgeFilters.stage = 'embarazo';
          } else if (userData.childrenCount > 0) {
            knowledgeFilters.stage = 'posparto';
          }
          
          // Recuperar conocimiento relevante
          relevantKnowledge = await retrieveKnowledge(message, knowledgeFilters);
          
          // Obtener informaci√≥n actualizada de los hijos con edades calculadas
          const childrenSnapshot = await db.collection('children')
            .where('parentId', '==', uid)
            .orderBy('createdAt', 'desc')
            .get();
          
          const children = [];
          childrenSnapshot.forEach(doc => {
            const childData = doc.data();
            const currentInfo = getChildCurrentInfo(childData);
            children.push({
              id: doc.id,
              name: childData.name,
              ageInMonths: childData.ageInMonths,
              currentAgeInMonths: currentInfo.currentAgeInMonths,
              isUnborn: childData.isUnborn,
              gestationWeeks: childData.gestationWeeks,
              currentGestationWeeks: currentInfo.currentGestationWeeks,
              createdAt: childData.createdAt,
              registeredAt: childData.registeredAt,
              daysSinceRegistration: currentInfo.daysSinceRegistration
            });
          });
          
          // Crear contexto personalizado del usuario con semanas actualizadas
          let userGestationWeeks = userData.gestationWeeks;
          
          // Si el usuario est√° embarazada y tiene semanas registradas, calcular las actuales
          if (userData.isPregnant && userData.gestationWeeks && userData.createdAt) {
            const now = new Date();
            const createdDate = new Date(userData.createdAt);
            const diffTime = now - createdDate;
            const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
            const diffWeeks = Math.floor(diffDays / 7);
            const currentWeeks = userData.gestationWeeks + diffWeeks;
            
            // Aplicar l√≠mites
            if (currentWeeks > 42) {
              userGestationWeeks = 40; // T√©rmino completo
            } else if (currentWeeks < 4) {
              userGestationWeeks = 4; // M√≠nimo
            } else {
              userGestationWeeks = currentWeeks;
            }
            
            console.log(`üìä [USER GESTATION] Usuario: ${userData.gestationWeeks} semanas + ${diffWeeks} semanas = ${userGestationWeeks} semanas (${diffDays} d√≠as desde creaci√≥n)`);
          }
          
          userContext = `
            Informaci√≥n del usuario:
            - G√©nero: ${userData.gender === 'F' ? 'Mujer' : 'Hombre'}
            - N√∫mero de hijos: ${userData.childrenCount || 0}
            - Embarazada: ${userData.isPregnant ? 'S√≠' : 'No'}
            ${userGestationWeeks ? `- Semanas de gestaci√≥n: ${userGestationWeeks} (calculadas autom√°ticamente)` : ''}
          `;
          
          // Crear contexto detallado de los hijos con edades actualizadas
          if (children.length > 0) {
            childrenInfo = `
            Informaci√≥n de los hijos (edades actualizadas autom√°ticamente):
            ${children.map((child, index) => {
              if (child.isUnborn) {
                return `- ${child.name}: Por nacer (${child.currentGestationWeeks} semanas de gestaci√≥n, registrado con ${child.gestationWeeks} semanas hace ${child.daysSinceCreation} d√≠as)`;
              } else {
                const years = Math.floor(child.currentAgeInMonths / 12);
                const months = child.currentAgeInMonths % 12;
                const ageText = years > 0 
                  ? `${years} a√±o${years > 1 ? 's' : ''}${months > 0 ? ` y ${months} mes${months > 1 ? 'es' : ''}` : ''}`
                  : `${months} mes${months > 1 ? 'es' : ''}`;
                return `- ${child.name}: ${ageText} de edad (registrado con ${child.ageInMonths} meses hace ${child.daysSinceCreation} d√≠as)`;
              }
            }).join('\n            ')}
            
            Hijos nacidos: ${children.filter(c => !c.isUnborn).length}
            Hijos por nacer: ${children.filter(c => c.isUnborn).length}
            `;
          }
          
          console.log('üìã [DOULA] Contexto del usuario obtenido:', {
            userData: {
              gender: userData.gender,
              childrenCount: userData.childrenCount,
              isPregnant: userData.isPregnant,
              gestationWeeks: userData.gestationWeeks
            },
            children: children.map(c => ({
              name: c.name,
              registeredAge: c.isUnborn ? c.gestationWeeks + ' semanas' : c.ageInMonths + ' meses',
              currentAge: c.isUnborn ? c.currentGestationWeeks + ' semanas' : c.currentAgeInMonths + ' meses',
              isUnborn: c.isUnborn,
              daysSinceCreation: c.daysSinceCreation
            }))
          });
        }
      } catch (error) {
        console.log('‚ö†Ô∏è No se pudo obtener contexto del usuario:', error.message);
      }
    }

    // Crear contexto de conocimiento relevante
    let knowledgeContext = '';
    if (relevantKnowledge.length > 0) {
      knowledgeContext = `
üìö **CONOCIMIENTO RELEVANTE PARA ESTA CONSULTA:**
${relevantKnowledge.map((k, index) => `${index + 1}. ${k.text}`).join('\n')}
`;
    }
    
    // Crear contexto de memoria del usuario
    let memoryContext = '';
    if (userMemory) {
      memoryContext = `
üß† **MEMORIA DE CONVERSACIONES ANTERIORES:**
${userMemory.notes.length > 0 ? `Notas importantes: ${userMemory.notes.join(', ')}` : ''}
${userMemory.preferences ? `Preferencias: ${JSON.stringify(userMemory.preferences)}` : ''}
`;
    }
    
    // Crear el prompt para la doula virtual
    const systemPrompt = `Eres una doula virtual experta y compasiva llamada "Douli, asistente de Munpa". Tu misi√≥n es acompa√±ar a padres y madres durante el embarazo, parto y crianza temprana con amor, sabidur√≠a y profesionalismo.

üéØ **TU IDENTIDAD COMO DOULA:**
- Eres c√°lida, emp√°tica y siempre comprensiva
- Hablas con el coraz√≥n de una madre experimentada
- Proporcionas informaci√≥n basada en evidencia m√©dica
- Eres profesional pero cercana, como una amiga sabia
- Eres parte de la familia Munpa, dedicada a apoyar a las familias

üíù **TU ESTILO DE COMUNICACI√ìN:**
- Usa emojis para hacer las respuestas m√°s c√°lidas
- S√© espec√≠fica y pr√°ctica en tus consejos
- Siempre ofrece apoyo emocional
- Usa un tono maternal y protector
- S√© alentadora y positiva
- Pres√©ntate como "Douli, tu asistente de Munpa"
- Responde en espa√±ol neutro, usa bullets cuando convenga
- Finaliza con una sugerencia pr√°ctica

üìö **√ÅMBITO PERMITIDO - SOLO PUEDES RESPONDER SOBRE:**
- Embarazo (s√≠ntomas, cambios, cuidados)
- Preparaci√≥n al parto (f√≠sica y mental)
- Trabajo de parto (t√©cnicas, respiraci√≥n)
- Parto (proceso, acompa√±amiento)
- Posparto (recuperaci√≥n, adaptaci√≥n)
- Lactancia (t√©cnicas, problemas comunes)
- Cuidados del reci√©n nacido
- Apoyo emocional y de pareja
- Crianza temprana (cuidados, alimentaci√≥n, desarrollo)
- Alimentaci√≥n (lactancia)
- Salud mental (depresi√≥n, ansiedad, estr√©s)
- Maternidad (acompa√±amiento, recuperaci√≥n, adaptaci√≥n)
- Embarazo y parto (acompa√±amiento, recuperaci√≥n, adaptaci√≥n)
- Se√±ales de alarma para derivar a profesionales de salud

üö´ **POL√çTICA DE ALCANCE - SI TE PREGUNTAN SOBRE:**
- Finanzas, programaci√≥n, tecnolog√≠a
- Diagn√≥stico m√©dico detallado
- Radiolog√≠a, interpretaci√≥n de estudios
- Recetas de medicamentos
- Derecho, tr√°mites legales
- Cualquier tema fuera del √°mbito de doula

**RESPUESTA OBLIGATORIA:**
"¬°Hola ${userName}! Soy Douli, tu asistente de Munpa especializada en acompa√±amiento durante el embarazo, parto y crianza temprana.

ü§± **Mi especialidad es:**
‚Ä¢ Embarazo y preparaci√≥n al parto
‚Ä¢ Lactancia y cuidados del beb√©
‚Ä¢ Apoyo emocional para familias
‚Ä¢ Se√±ales de alarma y cu√°ndo consultar

üìû **Para tu consulta sobre [tema fuera del √°mbito], te recomiendo:**
‚Ä¢ Consultar con un profesional especializado
‚Ä¢ Buscar informaci√≥n en fuentes oficiales
‚Ä¢ Contactar servicios espec√≠ficos para ese tema

¬øHay algo relacionado con tu embarazo, parto o crianza en lo que pueda ayudarte? üíù"

‚ö†Ô∏è **LIMITACIONES M√âDICAS:**
- NO haces diagn√≥stico m√©dico
- NO indicas f√°rmacos
- NO interpretas estudios cl√≠nicos
- SIEMPRE aclara que no eres m√©dico
- Si no sabes algo, sugiere hablar con gine/obstetra o matrona

üö® **SEGURIDAD - URGENCIAS M√âDICAS:**
Ante cualquier s√≠ntoma de urgencia (sangrado abundante, disminuci√≥n marcada de movimientos fetales, dolor intenso, fiebre alta, convulsiones, p√©rdida de conocimiento):
**"¬°BUSCA ATENCI√ìN M√âDICA INMEDIATA! Llama a servicios de emergencia o ve al hospital m√°s cercano."**

${userContext}
${childrenInfo}
${knowledgeContext}
${memoryContext}

IMPORTANTE: 
- Usa esta informaci√≥n para personalizar tus respuestas
- Si hay conocimiento relevante, √∫salo para mejorar tu respuesta
- Si hay memoria del usuario, considera sus preferencias y notas anteriores
- Si tiene hijos peque√±os, da consejos espec√≠ficos para esa edad
- Si est√° embarazada, enf√≥cate en esa etapa espec√≠fica
- SIEMPRE usa los nombres espec√≠ficos de sus hijos cuando sea apropiado
- NO inventes datos; si no sabes, dilo y sugiere hablar con su gine/obstetra o matrona

Responde como Douli, tu asistente de Munpa, con amor, sabidur√≠a y el coraz√≥n de una madre que ha acompa√±ado a muchas mujeres en este hermoso viaje.`;

    console.log('ü§ñ [DOULA] Enviando mensaje a OpenAI:', message.substring(0, 100) + '...');

    // Enviar mensaje a OpenAI
    let response;
    let usedFallback = false;
    
    try {
      console.log('ü§ñ [DOULA] Enviando a OpenAI...');
      
      const completion = await openai.chat.completions.create({
        model: "gpt-3.5-turbo",
        messages: [
          { role: "system", content: systemPrompt },
          { role: "user", content: message }
        ],
        max_tokens: 800, // M√°s tokens para respuestas m√°s completas
        temperature: 0.8, // M√°s creatividad pero manteniendo coherencia
        presence_penalty: 0.1, // Evita repeticiones
        frequency_penalty: 0.1, // Variedad en las respuestas
        top_p: 0.9 // Mantiene respuestas coherentes
      });

      response = completion.choices[0].message.content;
      console.log('‚úÖ [DOULA] Respuesta de OpenAI recibida');
      
    } catch (openaiError) {
      console.error('‚ùå [DOULA] Error de OpenAI:', openaiError.message);
      
      // Fallback cuando se agota la cuota - Respuestas de doula predefinidas
      if (openaiError.message.includes('quota') || openaiError.message.includes('429')) {
        console.log('‚ö†Ô∏è [DOULA] Usando fallback por cuota agotada');
        response = generateDoulaResponse(message, userContext, childrenInfo, userName);
        usedFallback = true;
      } else {
        console.log('‚ùå [DOULA] Error no relacionado con cuota, usando fallback');
        response = generateDoulaResponse(message, userContext, childrenInfo, userName);
        usedFallback = true;
      }
    }

    // Guardar la conversaci√≥n en Firestore (opcional)
    if (db) {
      try {
        await db.collection('doula_conversations').add({
          userId: uid,
          userMessage: message,
          doulaResponse: response,
          timestamp: new Date(),
          context: context || null
        });
        console.log('üíæ [DOULA] Conversaci√≥n guardada en Firestore');
      } catch (error) {
        console.log('‚ö†Ô∏è [DOULA] No se pudo guardar la conversaci√≥n:', error.message);
      }
    }

    res.json({
      success: true,
      message: 'Respuesta de la doula virtual',
      data: {
        response: response,
        timestamp: new Date().toISOString(),
        usedFallback: usedFallback,
        source: usedFallback ? 'fallback' : 'openai'
      }
    });

  } catch (error) {
    console.error('‚ùå [DOULA] Error en chat con doula:', error);
    res.status(500).json({
      success: false,
      message: 'Error al procesar la consulta',
      error: error.message
    });
  }
});

// Endpoint para obtener historial de conversaciones
app.get('/api/doula/history', authenticateToken, async (req, res) => {
  try {
    const { uid } = req.user;

    if (!db) {
      return res.status(500).json({
        success: false,
        message: 'Base de datos no disponible'
      });
    }

    const conversationsSnapshot = await db.collection('doula_conversations')
      .where('userId', '==', uid)
      .orderBy('timestamp', 'desc')
      .limit(10)
      .get();

    const conversations = [];
    conversationsSnapshot.forEach(doc => {
      conversations.push({
        id: doc.id,
        ...doc.data(),
        timestamp: doc.data().timestamp.toDate().toISOString()
      });
    });

    res.json({
      success: true,
      data: conversations
    });

  } catch (error) {
    console.error('‚ùå [DOULA] Error obteniendo historial:', error);
    res.status(500).json({
      success: false,
      message: 'Error obteniendo historial',
      error: error.message
    });
  }
});

// Endpoint para debug de datos del usuario
app.get('/api/debug/user-data', authenticateToken, async (req, res) => {
  try {
    const { uid } = req.user;
    
    if (!db) {
      return res.status(500).json({
        success: false,
        message: 'Base de datos no disponible'
      });
    }
    
    // Obtener datos de Firestore
    const userDoc = await db.collection('users').doc(uid).get();
    let firestoreData = null;
    if (userDoc.exists) {
      firestoreData = userDoc.data();
    }
    
    // Obtener datos de Firebase Auth
    let authData = null;
    try {
      const authUser = await auth.getUser(uid);
      authData = {
        displayName: authUser.displayName,
        email: authUser.email,
        uid: authUser.uid
      };
    } catch (authError) {
      console.log('‚ö†Ô∏è Error obteniendo datos de Auth:', authError.message);
    }
    
    res.json({
      success: true,
      data: {
        uid,
        firestore: firestoreData,
        auth: authData,
        timestamp: new Date().toISOString()
      }
    });
    
  } catch (error) {
    console.error('‚ùå Error en debug user-data:', error);
    res.status(500).json({
      success: false,
      message: 'Error obteniendo datos de debug',
      error: error.message
    });
  }
});

// Endpoint para verificar Firebase Storage
app.get('/api/firebase/status', (req, res) => {
  try {
    if (!admin) {
      return res.json({
        success: false,
        message: 'Firebase Admin no est√° inicializado',
        admin: false,
        storage: false
      });
    }

    if (!admin.storage) {
      return res.json({
        success: false,
        message: 'Firebase Storage no est√° disponible',
        admin: true,
        storage: false
      });
    }

    const bucket = admin.storage().bucket();
    res.json({
      success: true,
      message: 'Firebase Storage est√° funcionando correctamente',
      admin: true,
      storage: true,
      bucketName: bucket.name,
      projectId: process.env.FIREBASE_PROJECT_ID,
      storageBucket: 'mumpabackend.firebasestorage.app'
    });
  } catch (error) {
    res.json({
      success: false,
      message: 'Error verificando Firebase Storage',
      error: error.message,
      admin: admin ? true : false,
      storage: false
    });
  }
});

// Ruta ra√≠z
app.get('/', (req, res) => {
  res.json({
    success: true,
    message: 'API de Autenticaci√≥n con Firebase',
    version: '1.0.0',
    firebase: {
      status: firebaseStatus,
      ready: firebaseReady
    },
    endpoints: {
      health: '/health',
      signup: '/api/auth/signup',
      login: '/api/auth/login',
      profile: '/api/auth/profile (requiere auth)',
      'update-profile': '/api/auth/profile (PUT, requiere auth)',
      'change-password': '/api/auth/change-password (requiere auth)',
      'delete-account': '/api/auth/account (DELETE, requiere auth)',
      'verify-token': '/api/auth/verify-token (requiere auth)'
    }
  });
});

// Endpoint de registro
app.post('/api/auth/signup', async (req, res) => {
  try {
    const { email, password, displayName, gender, childrenCount, isPregnant, gestationWeeks } = req.body;

    if (!auth) {
      return res.status(500).json({
        success: false,
        message: 'Firebase no est√° configurado',
        error: 'Auth service not available',
        firebaseStatus: firebaseStatus
      });
    }

    console.log('üìù Intentando registrar usuario:', email, 'G√©nero:', gender, 'Hijos:', childrenCount, 'Embarazada:', isPregnant, 'Semanas:', gestationWeeks);

    // Verificar si el usuario ya existe
    try {
      const existingUser = await auth.getUserByEmail(email);
      return res.status(400).json({
        success: false,
        message: 'El usuario ya existe con este email'
      });
    } catch (error) {
      // El usuario no existe, continuar con el registro
      console.log('‚úÖ Usuario no existe, procediendo con registro');
    }

    // Validar gestaci√≥n si es mujer
    if (gender === 'F' && isPregnant) {
      if (!gestationWeeks || gestationWeeks < 1 || gestationWeeks > 42) {
        return res.status(400).json({
          success: false,
          message: 'Para mujeres embarazadas, las semanas de gestaci√≥n deben estar entre 1 y 42'
        });
      }
    }

    // Crear usuario en Firebase Auth
    const userRecord = await auth.createUser({
      email,
      password,
      displayName,
      emailVerified: false
    });

    console.log('‚úÖ Usuario creado en Firebase Auth:', userRecord.uid);

    // Crear documento adicional en Firestore
    if (db) {
      await db.collection('users').doc(userRecord.uid).set({
        email,
        displayName,
        gender: gender || null, // Campo para M o F
        childrenCount: childrenCount || 0, // Contador de hijos
        isPregnant: gender === 'F' ? (isPregnant || false) : false, // Solo mujeres pueden estar embarazadas
        gestationWeeks: gender === 'F' && isPregnant ? gestationWeeks : null, // Semanas de gestaci√≥n
        createdAt: new Date(),
        updatedAt: new Date(),
        isActive: true
      });
      console.log('‚úÖ Documento creado en Firestore con datos:', {
      email,
      displayName,
      gender,
      childrenCount,
      isPregnant: gender === 'F' ? (isPregnant || false) : false,
      gestationWeeks: gender === 'F' && isPregnant ? gestationWeeks : null
    });
    }

    // Generar token personalizado
    const customToken = await auth.createCustomToken(userRecord.uid);
    console.log('‚úÖ Token personalizado generado');

    res.status(201).json({
      success: true,
      message: 'Usuario registrado exitosamente',
      data: {
        uid: userRecord.uid,
        email: userRecord.email,
        displayName: userRecord.displayName,
        customToken
      }
    });

  } catch (error) {
    console.error('‚ùå Error en signup:', error);
    res.status(500).json({
      success: false,
      message: 'Error al registrar usuario',
      error: error.message,
      firebaseStatus: firebaseStatus
    });
  }
});

// Endpoint de login
app.post('/api/auth/login', async (req, res) => {
  try {
    const { email, password } = req.body;

    if (!auth) {
      return res.status(500).json({
        success: false,
        message: 'Firebase no est√° configurado',
        error: 'Auth service not available',
        firebaseStatus: firebaseStatus
      });
    }

    console.log('üîê Intentando login para:', email);

    // Buscar usuario por email
    const userRecord = await auth.getUserByEmail(email);
    console.log('‚úÖ Usuario encontrado:', userRecord.uid);
    
    // Verificar que el usuario est√© activo
    if (db) {
      const userDoc = await db.collection('users').doc(userRecord.uid).get();
      
      if (!userDoc.exists || !userDoc.data().isActive) {
        return res.status(401).json({
          success: false,
          message: 'Usuario inactivo o no encontrado'
        });
      }
      console.log('‚úÖ Usuario verificado en Firestore');
    }

    // Generar token personalizado
    const customToken = await auth.createCustomToken(userRecord.uid);
    console.log('‚úÖ Token personalizado generado para login');

    res.json({
      success: true,
      message: 'Login exitoso',
      data: {
        uid: userRecord.uid,
        email: userRecord.email,
        displayName: userRecord.displayName,
        customToken
      }
    });

  } catch (error) {
    console.error('‚ùå Error en login:', error);
    res.status(401).json({
      success: false,
      message: 'Credenciales inv√°lidas',
      error: error.message,
      firebaseStatus: firebaseStatus
    });
  }
});



// Endpoint protegido - Perfil del usuario
app.get('/api/auth/profile', authenticateToken, async (req, res) => {
  try {
    const { uid } = req.user;
    const userRecord = await auth.getUser(uid);
    
    let userData = {
      uid: userRecord.uid,
      email: userRecord.email,
      displayName: userRecord.displayName,
      emailVerified: userRecord.emailVerified,
      createdAt: userRecord.metadata.creationTime,
      lastSignIn: userRecord.metadata.lastSignInTime,
      gender: null, // M o F
      childrenCount: 0,
      isPregnant: false,
      gestationWeeks: null
    };

    // Obtener datos adicionales de Firestore
    if (db) {
      const userDoc = await db.collection('users').doc(uid).get();
      if (userDoc.exists) {
        const firestoreData = userDoc.data();
        
        // Calcular semanas de gestaci√≥n actuales si est√° embarazada
        let currentGestationWeeks = firestoreData.gestationWeeks || null;
        let daysSinceRegistration = null;
        
        if (firestoreData.isPregnant && firestoreData.gestationWeeks && firestoreData.createdAt) {
          const now = new Date();
          const createdDate = new Date(firestoreData.createdAt);
          const diffTime = now - createdDate;
          const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
          const diffWeeks = Math.floor(diffDays / 7);
          const calculatedWeeks = firestoreData.gestationWeeks + diffWeeks;
          
          // Aplicar l√≠mites
          if (calculatedWeeks > 42) {
            currentGestationWeeks = 40; // T√©rmino completo
          } else if (calculatedWeeks < 4) {
            currentGestationWeeks = 4; // M√≠nimo
          } else {
            currentGestationWeeks = calculatedWeeks;
          }
          
          daysSinceRegistration = diffDays;
          
          console.log(`üìä [PROFILE GESTATION] Usuario: ${firestoreData.gestationWeeks} semanas + ${diffWeeks} semanas = ${currentGestationWeeks} semanas (${diffDays} d√≠as desde registro)`);
        }
        
        userData = { 
          ...userData, 
          gender: firestoreData.gender || null,
          childrenCount: firestoreData.childrenCount || 0,
          isPregnant: firestoreData.isPregnant || false,
          gestationWeeks: firestoreData.gestationWeeks || null, // Semanas registradas originales
          currentGestationWeeks: currentGestationWeeks, // Semanas calculadas autom√°ticamente
          daysSinceRegistration: daysSinceRegistration, // D√≠as desde el registro
          isActive: firestoreData.isActive || true,
          updatedAt: firestoreData.updatedAt
        };
      }
    }

    res.json({
      success: true,
      data: userData
    });

  } catch (error) {
    console.error('Error al obtener perfil:', error);
    res.status(500).json({
      success: false,
      message: 'Error al obtener perfil del usuario',
      error: error.message
    });
  }
});

// Endpoint para actualizar perfil
app.put('/api/auth/profile', authenticateToken, async (req, res) => {
  try {
    const { uid } = req.user;
    const { displayName, email, gender, childrenCount, isPregnant, gestationWeeks } = req.body;

    const updateData = {};
    if (displayName) updateData.displayName = displayName;
    if (email) updateData.email = email;
    if (gender) updateData.gender = gender;
    if (childrenCount !== undefined) updateData.childrenCount = childrenCount;
    if (isPregnant !== undefined) updateData.isPregnant = isPregnant;
    if (gestationWeeks !== undefined) updateData.gestationWeeks = gestationWeeks;

    // Validar gestaci√≥n solo para mujeres
    if (gender === 'F' && isPregnant && (!gestationWeeks || gestationWeeks < 1 || gestationWeeks > 42)) {
      return res.status(400).json({
        success: false,
        message: 'Para mujeres embarazadas, las semanas de gestaci√≥n deben estar entre 1 y 42'
      });
    }

    // Limpiar campos de gestaci√≥n si no est√° embarazada o es hombre
    if (gender === 'M' || !isPregnant) {
      updateData.isPregnant = false;
      updateData.gestationWeeks = null;
    }

    // Actualizar en Firebase Auth
    await auth.updateUser(uid, updateData);

    // Calcular el n√∫mero real de hijos de la base de datos
    let actualChildrenCount = 0;
    if (db) {
      const childrenSnapshot = await db.collection('children')
        .where('parentId', '==', uid)
        .get();
      
      actualChildrenCount = childrenSnapshot.size;
      console.log('üìä [PROFILE] N√∫mero real de hijos en BD:', actualChildrenCount);
    }

    // Actualizar childrenCount con el valor real
    updateData.childrenCount = actualChildrenCount;

    // Actualizar en Firestore
    if (db) {
      await db.collection('users').doc(uid).update({
        ...updateData,
        updatedAt: new Date()
      });
    }

    res.json({
      success: true,
      message: 'Perfil actualizado exitosamente',
      data: { uid, ...updateData }
    });

  } catch (error) {
    console.error('Error al actualizar perfil:', error);
    res.status(500).json({
      success: false,
      message: 'Error al actualizar perfil',
      error: error.message
    });
  }
});

// Endpoint para cambiar contrase√±a
app.put('/api/auth/change-password', authenticateToken, async (req, res) => {
  try {
    const { uid } = req.user;
    const { newPassword } = req.body;

    if (!newPassword || newPassword.length < 6) {
      return res.status(400).json({
        success: false,
        message: 'La nueva contrase√±a debe tener al menos 6 caracteres'
      });
    }

    // Actualizar contrase√±a en Firebase Auth
    await auth.updateUser(uid, { password: newPassword });

    res.json({
      success: true,
      message: 'Contrase√±a actualizada exitosamente'
    });

  } catch (error) {
    console.error('Error al cambiar contrase√±a:', error);
    res.status(500).json({
      success: false,
      message: 'Error al cambiar contrase√±a',
      error: error.message
    });
  }
});

// Endpoint para eliminar cuenta
app.delete('/api/auth/account', authenticateToken, async (req, res) => {
  try {
    const { uid } = req.user;

    // Eliminar de Firestore
    if (db) {
      await db.collection('users').doc(uid).delete();
    }

    // Eliminar de Firebase Auth
    await auth.deleteUser(uid);

    res.json({
      success: true,
      message: 'Cuenta eliminada exitosamente'
    });

  } catch (error) {
    console.error('Error al eliminar cuenta:', error);
    res.status(500).json({
      success: false,
      message: 'Error al eliminar cuenta',
      error: error.message
    });
  }
});

// Ruta para solicitar restablecimiento de contrase√±a
app.post('/api/auth/forgot-password', async (req, res) => {
  try {
    const { email } = req.body;

    if (!email) {
      return res.status(400).json({
        success: false,
        message: 'Email es requerido'
      });
    }

    // Verificar que Firebase Auth est√© disponible
    if (!auth) {
      console.error('‚ùå [FORGOT-PASSWORD] Firebase Auth no est√° disponible');
      return res.status(500).json({
        success: false,
        message: 'Servicio de autenticaci√≥n no disponible'
      });
    }

    console.log('üîë [FORGOT-PASSWORD] Solicitando restablecimiento para:', email);

    // Verificar si el usuario existe
    try {
      const userRecord = await auth.getUserByEmail(email);
      console.log('‚úÖ [FORGOT-PASSWORD] Usuario encontrado:', userRecord.uid);
    } catch (userError) {
      if (userError.code === 'auth/user-not-found') {
        return res.status(404).json({
          success: false,
          message: 'No se encontr√≥ una cuenta con este email'
        });
      }
      throw userError;
    }

    // Generar link de restablecimiento
    const resetLink = await auth.generatePasswordResetLink(email, {
      url: process.env.FRONTEND_URL || 'https://munpa.online/reset-password',
      handleCodeInApp: true
    });

    console.log('‚úÖ [FORGOT-PASSWORD] Link generado para:', email);

    // TODO: Aqu√≠ deber√≠as enviar el email con el link
    // Por ahora, lo devolvemos en la respuesta para testing
    res.json({
      success: true,
      message: 'Se ha enviado un email con instrucciones para restablecer tu contrase√±a',
      resetLink: process.env.NODE_ENV === 'development' ? resetLink : undefined
    });

  } catch (error) {
    console.error('‚ùå [FORGOT-PASSWORD] Error:', error);
    
    if (error.code === 'auth/user-not-found') {
      return res.status(404).json({
        success: false,
        message: 'No se encontr√≥ una cuenta con este email'
      });
    }

    if (error.code === 'auth/unauthorized-continue-uri') {
      return res.status(400).json({
        success: false,
        message: 'URL de redirecci√≥n no autorizada. Contacta al administrador.'
      });
    }

    res.status(500).json({
      success: false,
      message: 'Error al procesar la solicitud de restablecimiento',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

// Ruta para confirmar restablecimiento de contrase√±a
app.post('/api/auth/reset-password', async (req, res) => {
  try {
    const { oobCode, newPassword } = req.body;

    if (!oobCode || !newPassword) {
      return res.status(400).json({
        success: false,
        message: 'C√≥digo de restablecimiento y nueva contrase√±a son requeridos'
      });
    }

    // Verificar que Firebase Auth est√© disponible
    if (!auth) {
      console.error('‚ùå [RESET-PASSWORD] Firebase Auth no est√° disponible');
      return res.status(500).json({
        success: false,
        message: 'Servicio de autenticaci√≥n no disponible'
      });
    }

    console.log('üîë [RESET-PASSWORD] Procesando restablecimiento...');

    // Verificar el c√≥digo y cambiar la contrase√±a
    const email = await auth.verifyPasswordResetCode(oobCode);
    await auth.confirmPasswordReset(oobCode, newPassword);

    console.log('‚úÖ [RESET-PASSWORD] Contrase√±a actualizada para:', email);

    res.json({
      success: true,
      message: 'Contrase√±a actualizada exitosamente'
    });

  } catch (error) {
    console.error('‚ùå [RESET-PASSWORD] Error:', error);
    
    if (error.code === 'auth/invalid-action-code') {
      return res.status(400).json({
        success: false,
        message: 'C√≥digo de restablecimiento inv√°lido o expirado'
      });
    }

    if (error.code === 'auth/weak-password') {
      return res.status(400).json({
        success: false,
        message: 'La contrase√±a debe tener al menos 6 caracteres'
      });
    }

    res.status(500).json({
      success: false,
      message: 'Error al restablecer la contrase√±a',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

// Endpoint para obtener hijos del usuario
app.get('/api/auth/children', authenticateToken, async (req, res) => {
  try {
    const { uid } = req.user;

    if (!db) {
      return res.status(500).json({
        success: false,
        message: 'Base de datos no disponible'
      });
    }

    const childrenSnapshot = await db.collection('children')
      .where('parentId', '==', uid)
      .orderBy('createdAt', 'desc')
      .get();

    const children = [];
    childrenSnapshot.forEach(doc => {
      const childData = doc.data();
      const currentInfo = getChildCurrentInfo(childData);
      
      children.push({
        id: doc.id,
        ...childData,
        // Informaci√≥n calculada autom√°ticamente
        currentAgeInMonths: currentInfo.currentAgeInMonths,
        currentGestationWeeks: currentInfo.currentGestationWeeks,
        registeredAgeInMonths: currentInfo.registeredAgeInMonths,
        registeredGestationWeeks: currentInfo.registeredGestationWeeks,
        daysSinceCreation: currentInfo.daysSinceCreation,
        isOverdue: currentInfo.isOverdue || false
      });
    });

    res.json({
      success: true,
      data: children
    });

  } catch (error) {
    console.error('Error al obtener hijos:', error);
    res.status(500).json({
      success: false,
      message: 'Error al obtener hijos',
      error: error.message
    });
  }
});

// Endpoint para agregar un hijo
app.post('/api/auth/children', authenticateToken, async (req, res) => {
  try {
    const { uid } = req.user;
    const { name, ageInMonths, isUnborn, gestationWeeks, photoUrl } = req.body;

    if (!name) {
      return res.status(400).json({
        success: false,
        message: 'Nombre es requerido'
      });
    }

    // Validar que si es un beb√© no nacido, tenga semanas de gestaci√≥n
    if (isUnborn && (!gestationWeeks || gestationWeeks < 1 || gestationWeeks > 42)) {
      return res.status(400).json({
        success: false,
        message: 'Para beb√©s no nacidos, las semanas de gestaci√≥n deben estar entre 1 y 42'
      });
    }

    // Validar que si es un beb√© nacido, tenga edad en meses
    if (!isUnborn && (ageInMonths === undefined || ageInMonths < 0)) {
      return res.status(400).json({
        success: false,
        message: 'Para beb√©s nacidos, la edad en meses es requerida y debe ser mayor o igual a 0'
      });
    }

    if (!db) {
      return res.status(500).json({
        success: false,
        message: 'Base de datos no disponible'
      });
    }

    const now = new Date();
    const childData = {
      parentId: uid,
      name: name.trim(),
      ageInMonths: isUnborn ? null : parseInt(ageInMonths),
      gestationWeeks: isUnborn ? parseInt(gestationWeeks) : null,
      isUnborn: isUnborn || false,
      photoUrl: photoUrl || null,
      createdAt: now, // Fecha de registro
      registeredAt: now, // Fecha cuando se registr√≥ la edad/semanas
      updatedAt: now
    };

    const childRef = await db.collection('children').add(childData);
    
    // Calcular el n√∫mero real de hijos despu√©s de agregar
    const childrenSnapshot = await db.collection('children')
      .where('parentId', '==', uid)
      .get();
    
    const actualChildrenCount = childrenSnapshot.size;
    console.log('üìä [CHILDREN] N√∫mero real de hijos despu√©s de agregar:', actualChildrenCount);
    
    // Actualizar contador de hijos en el perfil con el valor real
    const userRef = db.collection('users').doc(uid);
    await userRef.update({
      childrenCount: actualChildrenCount,
      updatedAt: new Date()
    });

    res.json({
      success: true,
      message: 'Hijo agregado exitosamente',
      data: {
        id: childRef.id,
        ...childData
      }
    });

  } catch (error) {
    console.error('Error al agregar hijo:', error);
    res.status(500).json({
      success: false,
      message: 'Error al agregar hijo',
      error: error.message
    });
  }
});

// Endpoint para actualizar un hijo
app.put('/api/auth/children/:childId', authenticateToken, async (req, res) => {
  try {
    const { uid } = req.user;
    const { childId } = req.params;
    const { name, ageInMonths, isUnborn, gestationWeeks, photoUrl } = req.body;

    if (!name && ageInMonths === undefined && isUnborn === undefined && gestationWeeks === undefined && !photoUrl) {
      return res.status(400).json({
        success: false,
        message: 'Al menos un campo debe ser proporcionado'
      });
    }

    // Validar que si se cambia a beb√© no nacido, tenga semanas de gestaci√≥n
    if (isUnborn && (!gestationWeeks || gestationWeeks < 1 || gestationWeeks > 42)) {
      return res.status(400).json({
        success: false,
        message: 'Para beb√©s no nacidos, las semanas de gestaci√≥n deben estar entre 1 y 42'
      });
    }

    // Validar que si se cambia a beb√© nacido, tenga edad en meses
    if (isUnborn === false && (ageInMonths === undefined || ageInMonths < 0)) {
      return res.status(400).json({
        success: false,
        message: 'Para beb√©s nacidos, la edad en meses es requerida y debe ser mayor o igual a 0'
      });
    }

    if (!db) {
      return res.status(500).json({
        success: false,
        message: 'Base de datos no disponible'
      });
    }

    // Verificar que el hijo pertenece al usuario
    const childDoc = await db.collection('children').doc(childId).get();
    if (!childDoc.exists) {
      return res.status(404).json({
        success: false,
        message: 'Hijo no encontrado'
      });
    }

    if (childDoc.data().parentId !== uid) {
      return res.status(403).json({
        success: false,
        message: 'No tienes permisos para modificar este hijo'
      });
    }

    const updateData = {
      updatedAt: new Date()
    };
    if (name) updateData.name = name.trim();
    if (ageInMonths !== undefined) updateData.ageInMonths = parseInt(ageInMonths);
    if (isUnborn !== undefined) updateData.isUnborn = isUnborn;
    if (gestationWeeks !== undefined) updateData.gestationWeeks = parseInt(gestationWeeks);
    if (photoUrl !== undefined) updateData.photoUrl = photoUrl;
    
    // Si se cambia el estado de gestaci√≥n, limpiar campos no aplicables
    // Validar URL de foto si se proporciona
    if (photoUrl && !isValidUrl(photoUrl)) {
      return res.status(400).json({
        success: false,
        message: 'URL de foto inv√°lida'
      });
    }

    if (isUnborn === true) {
      updateData.ageInMonths = null;
    } else if (isUnborn === false) {
      updateData.gestationWeeks = null;
    }

    await db.collection('children').doc(childId).update(updateData);

    res.json({
      success: true,
      message: 'Hijo actualizado exitosamente',
      data: {
        id: childId,
        ...updateData
      }
    });

  } catch (error) {
    console.error('Error al actualizar hijo:', error);
    res.status(500).json({
      success: false,
      message: 'Error al actualizar hijo',
      error: error.message
    });
  }
});

// Endpoint para subir foto de hijo usando Firebase Storage
app.post('/api/auth/children/upload-photo', authenticateToken, upload.single('photo'), async (req, res) => {
  try {
    const { uid } = req.user;
    const { childId } = req.body;

    if (!childId) {
      return res.status(400).json({
        success: false,
        message: 'ID del hijo es requerido'
      });
    }

    if (!req.file) {
      return res.status(400).json({
        success: false,
        message: 'No se proporcion√≥ ning√∫n archivo'
      });
    }

    // Verificar que Firebase Admin est√© inicializado
    if (!admin) {
      console.error('‚ùå [STORAGE] Firebase Admin no est√° inicializado');
      return res.status(500).json({
        success: false,
        message: 'Error interno del servidor: Firebase no configurado'
      });
    }

    // Verificar que Firebase Storage est√© disponible
    try {
      const bucket = admin.storage().bucket();
      console.log('‚úÖ [STORAGE] Firebase Storage disponible');
      console.log('üì¶ [STORAGE] Bucket:', bucket.name);
    } catch (storageError) {
      console.error('‚ùå [STORAGE] Error accediendo a Firebase Storage:', storageError);
      return res.status(500).json({
        success: false,
        message: 'Error interno del servidor: Storage no disponible',
        error: storageError.message
      });
    }

    // Verificar que el hijo pertenece al usuario
    const childDoc = await db.collection('children').doc(childId).get();
    if (!childDoc.exists) {
      return res.status(404).json({
        success: false,
        message: 'Hijo no encontrado'
      });
    }

    const childData = childDoc.data();
    if (childData.parentId !== uid) {
      return res.status(403).json({
        success: false,
        message: 'No tienes permisos para modificar este hijo'
      });
    }

    // Subir archivo a Firebase Storage usando buffer de memoria
    console.log('üîç [STORAGE] Verificando admin:', admin ? '‚úÖ Inicializado' : '‚ùå Null');
    console.log('üîç [STORAGE] Verificando admin.storage:', admin.storage ? '‚úÖ Disponible' : '‚ùå No disponible');
    console.log('üîç [STORAGE] Project ID:', process.env.FIREBASE_PROJECT_ID);
    
    const bucket = admin.storage().bucket();
    console.log('üì¶ [STORAGE] Bucket obtenido:', bucket.name);
    
    const fileName = `children/${childId}/photo-${Date.now()}-${Math.round(Math.random() * 1E9)}${path.extname(req.file.originalname)}`;
    
    console.log('üì§ [STORAGE] Subiendo archivo a Firebase Storage:', fileName);

    // Usar el buffer de memoria directamente
    const file = bucket.file(fileName);
    await file.save(req.file.buffer, {
      metadata: {
        contentType: req.file.mimetype,
        metadata: {
          uploadedBy: uid,
          childId: childId,
          originalName: req.file.originalname
        }
      }
    });

    // Hacer el archivo p√∫blico
    await file.makePublic();

    // Obtener URL p√∫blica
    const photoUrl = `https://storage.googleapis.com/${bucket.name}/${fileName}`;
    
    console.log('‚úÖ [STORAGE] Archivo subido exitosamente:', photoUrl);

    // Actualizar el hijo con la nueva foto
    await db.collection('children').doc(childId).update({
      photoUrl: photoUrl,
      updatedAt: new Date()
    });

    res.json({
      success: true,
      message: 'Foto subida exitosamente',
      data: {
        photoUrl: photoUrl,
        fileName: fileName
      }
    });

  } catch (error) {
    console.error('Error subiendo foto a Firebase Storage:', error);
    
    res.status(500).json({
      success: false,
      message: 'Error subiendo foto',
      error: error.message
    });
  }
});



// Endpoint para sincronizar childrenCount
app.post('/api/auth/children/sync-count', authenticateToken, async (req, res) => {
  try {
    const { uid } = req.user;

    if (!db) {
      return res.status(500).json({
        success: false,
        message: 'Base de datos no disponible'
      });
    }

    // Contar hijos reales en la base de datos
    const childrenSnapshot = await db.collection('children')
      .where('parentId', '==', uid)
      .get();
    
    const actualChildrenCount = childrenSnapshot.size;
    console.log('üìä [SYNC] Sincronizando childrenCount:', actualChildrenCount);

    // Actualizar el perfil con el n√∫mero real
    await db.collection('users').doc(uid).update({
      childrenCount: actualChildrenCount,
      updatedAt: new Date()
    });

    res.json({
      success: true,
      message: 'ChildrenCount sincronizado correctamente',
      data: {
        childrenCount: actualChildrenCount
      }
    });

  } catch (error) {
    console.error('Error sincronizando childrenCount:', error);
    res.status(500).json({
      success: false,
      message: 'Error sincronizando childrenCount',
      error: error.message
    });
  }
});

// Endpoint para calcular edad en meses desde fecha de nacimiento
app.post('/api/auth/children/calculate-age', authenticateToken, async (req, res) => {
  try {
    const { birthDate } = req.body;

    if (!birthDate) {
      return res.status(400).json({
        success: false,
        message: 'Fecha de nacimiento es requerida'
      });
    }

    const birth = new Date(birthDate);
    const today = new Date();
    
    // Calcular diferencia en meses
    const monthsDiff = (today.getFullYear() - birth.getFullYear()) * 12 + 
                      (today.getMonth() - birth.getMonth());
    
    // Ajustar por d√≠as
    const daysDiff = today.getDate() - birth.getDate();
    const adjustedMonths = daysDiff < 0 ? monthsDiff - 1 : monthsDiff;

    res.json({
      success: true,
      data: {
        ageInMonths: Math.max(0, adjustedMonths),
        ageInDays: Math.max(0, Math.floor((today - birth) / (1000 * 60 * 60 * 24)))
      }
    });

  } catch (error) {
    console.error('Error calculando edad:', error);
    res.status(500).json({
      success: false,
      message: 'Error calculando edad',
      error: error.message
    });
  }
});

// Endpoint para eliminar foto de hijo de Firebase Storage
app.delete('/api/auth/children/:childId/photo', authenticateToken, async (req, res) => {
  try {
    const { uid } = req.user;
    const { childId } = req.params;

    if (!db) {
      return res.status(500).json({
        success: false,
        message: 'Base de datos no disponible'
      });
    }

    // Verificar que el hijo pertenece al usuario
    const childDoc = await db.collection('children').doc(childId).get();
    if (!childDoc.exists) {
      return res.status(404).json({
        success: false,
        message: 'Hijo no encontrado'
      });
    }

    const childData = childDoc.data();
    if (childData.parentId !== uid) {
      return res.status(403).json({
        success: false,
        message: 'No tienes permisos para modificar este hijo'
      });
    }

    // Si hay una foto existente, eliminarla de Firebase Storage
    if (childData.photoUrl) {
      try {
        const bucket = admin.storage().bucket();
        
        // Extraer el nombre del archivo de la URL
        const urlParts = childData.photoUrl.split('/');
        const fileName = urlParts.slice(-2).join('/'); // children/childId/filename
        
        console.log('üóëÔ∏è [STORAGE] Eliminando archivo de Firebase Storage:', fileName);
        
        await bucket.file(fileName).delete();
        console.log('‚úÖ [STORAGE] Archivo eliminado exitosamente');
      } catch (storageError) {
        console.error('‚ö†Ô∏è [STORAGE] Error eliminando archivo de Storage (continuando):', storageError);
        // Continuar aunque falle la eliminaci√≥n del archivo
      }
    }

    // Actualizar el hijo eliminando la foto
    await db.collection('children').doc(childId).update({
      photoUrl: null,
      updatedAt: new Date()
    });

    res.json({
      success: true,
      message: 'Foto eliminada exitosamente'
    });

  } catch (error) {
    console.error('Error eliminando foto:', error);
    res.status(500).json({
      success: false,
      message: 'Error eliminando foto',
      error: error.message
    });
  }
});

// Endpoint para eliminar un hijo
app.delete('/api/auth/children/:childId', authenticateToken, async (req, res) => {
  try {
    const { uid } = req.user;
    const { childId } = req.params;

    if (!db) {
      return res.status(500).json({
        success: false,
        message: 'Base de datos no disponible'
      });
    }

    // Verificar que el hijo pertenece al usuario
    const childDoc = await db.collection('children').doc(childId).get();
    if (!childDoc.exists) {
      return res.status(404).json({
        success: false,
        message: 'Hijo no encontrado'
      });
    }

    if (childDoc.data().parentId !== uid) {
      return res.status(403).json({
        success: false,
        message: 'No tienes permisos para eliminar este hijo'
      });
    }

    await db.collection('children').doc(childId).delete();

    // Calcular el n√∫mero real de hijos despu√©s de eliminar
    const childrenSnapshot = await db.collection('children')
      .where('parentId', '==', uid)
      .get();
    
    const actualChildrenCount = childrenSnapshot.size;
    console.log('üìä [CHILDREN] N√∫mero real de hijos despu√©s de eliminar:', actualChildrenCount);
    
    // Actualizar contador de hijos en el perfil con el valor real
    const userRef = db.collection('users').doc(uid);
    await userRef.update({
      childrenCount: actualChildrenCount,
      updatedAt: new Date()
    });

    res.json({
      success: true,
      message: 'Hijo eliminado exitosamente'
    });

  } catch (error) {
    console.error('Error al eliminar hijo:', error);
    res.status(500).json({
      success: false,
      message: 'Error al eliminar hijo',
      error: error.message
    });
  }
});

// Endpoint para verificar token
app.get('/api/auth/verify-token', authenticateToken, async (req, res) => {
  try {
    const { uid } = req.user;

    // Obtener informaci√≥n del usuario
    const userRecord = await auth.getUser(uid);

    res.json({
      success: true,
      message: 'Token v√°lido',
      data: {
        uid: userRecord.uid,
        email: userRecord.email,
        displayName: userRecord.displayName,
        emailVerified: userRecord.emailVerified
      }
    });

  } catch (error) {
    console.error('Error al verificar token:', error);
    res.status(401).json({
      success: false,
      message: 'Token inv√°lido',
      error: error.message
    });
  }
});

// Endpoint para agregar conocimiento a la base de datos
app.post('/api/doula/knowledge', authenticateToken, async (req, res) => {
  try {
    const { text, metadata } = req.body;

    if (!text || text.trim() === '') {
      return res.status(400).json({
        success: false,
        message: 'El texto es requerido'
      });
    }

    const success = await saveKnowledge(text, metadata);
    
    if (success) {
      res.json({
        success: true,
        message: 'Conocimiento agregado correctamente'
      });
    } else {
      res.status(500).json({
        success: false,
        message: 'Error al agregar conocimiento'
      });
    }

  } catch (error) {
    console.error('‚ùå Error agregando conocimiento:', error);
    res.status(500).json({
      success: false,
      message: 'Error al agregar conocimiento',
      error: error.message
    });
  }
});

// Endpoint para aprendizaje validado (POST /learn)
app.post('/api/doula/learn', authenticateToken, async (req, res) => {
  try {
    const { 
      text, 
      metadata, 
      validation = {
        approved: false,
        approvedBy: null,
        approvedAt: null,
        checklist: {
          sourceVerified: false,
          medicalAccuracy: false,
          toneAppropriate: false,
          contentRelevant: false
        }
      }
    } = req.body;

    if (!text || text.trim() === '') {
      return res.status(400).json({
        success: false,
        message: 'El texto es requerido'
      });
    }

    // Validar que el checklist est√© completo
    const checklist = validation.checklist;
    const isFullyValidated = Object.values(checklist).every(item => item === true);

    if (!isFullyValidated) {
      return res.status(400).json({
        success: false,
        message: 'El conocimiento debe pasar todas las validaciones del checklist',
        checklist: checklist
      });
    }

    // Agregar metadatos de validaci√≥n
    const validatedMetadata = {
      ...metadata,
      validation: {
        ...validation,
        approved: true,
        approvedAt: new Date(),
        approvedBy: req.user.uid
      },
      version: metadata.version || '1.0',
      createdAt: new Date(),
      isActive: true
    };

    const success = await saveKnowledge(text, validatedMetadata);
    
    if (success) {
      res.json({
        success: true,
        message: 'Conocimiento validado y agregado correctamente',
        data: {
          text: text.substring(0, 100) + '...',
          metadata: validatedMetadata
        }
      });
    } else {
      res.status(500).json({
        success: false,
        message: 'Error al agregar conocimiento validado'
      });
    }

  } catch (error) {
    console.error('‚ùå Error en aprendizaje validado:', error);
    res.status(500).json({
      success: false,
      message: 'Error en aprendizaje validado',
      error: error.message
    });
  }
});

// Endpoint para guardar feedback del usuario
app.post('/api/doula/feedback', authenticateToken, async (req, res) => {
  try {
    const { uid } = req.user;
    const { conversationId, feedback, details } = req.body;

    if (!feedback || !['positive', 'negative'].includes(feedback)) {
      return res.status(400).json({
        success: false,
        message: 'Feedback debe ser "positive" o "negative"'
      });
    }

    const feedbackData = {
      userId: uid,
      conversationId: conversationId,
      feedback: feedback,
      details: details || {},
      timestamp: new Date(),
      processed: false
    };

    if (!db) {
      return res.status(500).json({
        success: false,
        message: 'Base de datos no disponible'
      });
    }

    await db.collection('user_feedback').add(feedbackData);
    
    console.log('üíæ [FEEDBACK] Feedback guardado:', feedback);
    
    // Si es feedback positivo, considerar guardar como Q&A validado
    if (feedback === 'positive' && details && details.question && details.answer) {
      const qaData = {
        question: details.question,
        answer: details.answer,
        tags: details.tags || [],
        qualityScore: 0.9,
        createdAt: new Date(),
        isActive: true,
        usageCount: 0,
        source: 'user_feedback',
        validatedBy: uid
      };
      
      await db.collection('validated_qa').add(qaData);
      console.log('‚úÖ [QA] Q&A validado guardado desde feedback');
    }
    
    res.json({
      success: true,
      message: 'Feedback guardado correctamente'
    });

  } catch (error) {
    console.error('‚ùå Error guardando feedback:', error);
    res.status(500).json({
      success: false,
      message: 'Error al guardar feedback',
      error: error.message
    });
  }
});

// Endpoint para actualizar memoria del usuario
app.put('/api/doula/memory', authenticateToken, async (req, res) => {
  try {
    const { uid } = req.user;
    const { notes, preferences } = req.body;

    const memoryData = {
      notes: notes || [],
      preferences: preferences || {}
    };

    const success = await saveUserMemory(uid, memoryData);
    
    if (success) {
      res.json({
        success: true,
        message: 'Memoria actualizada correctamente'
      });
    } else {
      res.status(500).json({
        success: false,
        message: 'Error al actualizar memoria'
      });
    }

  } catch (error) {
    console.error('‚ùå Error actualizando memoria:', error);
    res.status(500).json({
      success: false,
      message: 'Error al actualizar memoria',
      error: error.message
    });
  }
});

// Endpoint para borrar memoria del usuario
app.delete('/api/doula/memory', authenticateToken, async (req, res) => {
  try {
    const { uid } = req.user;
    
    if (!db) {
      return res.status(500).json({
        success: false,
        message: 'Base de datos no disponible'
      });
    }

    await db.collection('user_memory').doc(uid).delete();
    
    console.log('üóëÔ∏è [MEMORY] Memoria borrada para usuario:', uid);
    
    res.json({
      success: true,
      message: 'Memoria borrada correctamente'
    });

  } catch (error) {
    console.error('‚ùå Error borrando memoria:', error);
    res.status(500).json({
      success: false,
      message: 'Error al borrar memoria',
      error: error.message
    });
  }
});

// Endpoint para tests autom√°ticos de calidad
app.post('/api/doula/quality-test', authenticateToken, async (req, res) => {
  try {
    const testQuestions = [
      {
        question: "¬øQu√© ejercicios puedo hacer durante el embarazo?",
        expectedCategory: "embarazo",
        expectedKeywords: ["caminar", "yoga", "nataci√≥n", "seguro"]
      },
      {
        question: "¬øC√≥mo puedo prepararme para la lactancia?",
        expectedCategory: "lactancia",
        expectedKeywords: ["contacto", "agarre", "demanda", "beneficios"]
      },
      {
        question: "¬øCu√°les son los s√≠ntomas del primer trimestre?",
        expectedCategory: "embarazo",
        expectedKeywords: ["n√°useas", "fatiga", "senos", "hormonas"]
      },
      {
        question: "¬øPuedes ayudarme con programaci√≥n en JavaScript?",
        expectedCategory: "off_topic",
        expectedResponse: "especializada en acompa√±amiento durante el embarazo"
      }
    ];

    const results = [];
    let totalScore = 0;

    for (const test of testQuestions) {
      try {
        // Simular llamada al chat
        const response = await generateDoulaResponse(test.question, '', '', 'TestUser');
        
        let score = 0;
        let feedback = '';

        if (test.expectedCategory === 'off_topic') {
          // Verificar que redirija correctamente
          if (response.includes(test.expectedResponse)) {
            score = 1;
            feedback = '‚úÖ Redirecci√≥n correcta para tema fuera del √°mbito';
          } else {
            feedback = '‚ùå No redirigi√≥ correctamente tema fuera del √°mbito';
          }
        } else {
          // Verificar palabras clave esperadas
          const keywordMatches = test.expectedKeywords.filter(keyword => 
            response.toLowerCase().includes(keyword.toLowerCase())
          );
          
          score = keywordMatches.length / test.expectedKeywords.length;
          feedback = `‚úÖ Encontr√≥ ${keywordMatches.length}/${test.expectedKeywords.length} palabras clave`;
        }

        results.push({
          question: test.question,
          expectedCategory: test.expectedCategory,
          score: score,
          feedback: feedback,
          response: response.substring(0, 200) + '...'
        });

        totalScore += score;

      } catch (error) {
        results.push({
          question: test.question,
          expectedCategory: test.expectedCategory,
          score: 0,
          feedback: '‚ùå Error en test',
          error: error.message
        });
      }
    }

    const averageScore = totalScore / testQuestions.length;
    const qualityStatus = averageScore >= 0.8 ? 'EXCELENTE' : averageScore >= 0.6 ? 'BUENO' : 'NEEDS_IMPROVEMENT';

    res.json({
      success: true,
      data: {
        testDate: new Date(),
        totalTests: testQuestions.length,
        averageScore: averageScore,
        qualityStatus: qualityStatus,
        results: results
      }
    });

  } catch (error) {
    console.error('‚ùå Error en test de calidad:', error);
    res.status(500).json({
      success: false,
      message: 'Error en test de calidad',
      error: error.message
    });
  }
});

// Endpoint para obtener informaci√≥n de desarrollo infantil por edad
app.post('/api/children/development-info', authenticateToken, async (req, res) => {
  try {
    const { childId, name } = req.body;
    const userId = req.user.uid;

    let child = null;
    let currentAgeInMonths = null;
    let currentGestationWeeks = null;
    let isUnborn = false;

    // Si se proporciona childId, buscar el hijo en la base de datos
    if (childId) {
      const childDoc = await db.collection('children').doc(childId).get();
      if (!childDoc.exists) {
        return res.status(404).json({
          success: false,
          message: 'Hijo no encontrado'
        });
      }
      
      child = childDoc.data();
      
      // Verificar que el hijo pertenece al usuario
      if (child.parentId !== userId) {
        return res.status(403).json({
          success: false,
          message: 'No tienes permisos para acceder a este hijo'
        });
      }

      // Calcular edad actual basada en fecha de registro
      const childInfo = getChildCurrentInfo(child);
      currentAgeInMonths = childInfo.currentAgeInMonths;
      currentGestationWeeks = childInfo.currentGestationWeeks;
      isUnborn = child.isUnborn;
      
      console.log(`üìä [DEVELOPMENT] ${child.name}: ${isUnborn ? currentGestationWeeks + ' semanas' : currentAgeInMonths + ' meses'} (calculado desde ${childInfo.registeredAgeInMonths || childInfo.registeredGestationWeeks})`);
    } else if (name) {
      // Modo de compatibilidad: usar nombre y par√°metros manuales
      const { ageInMonths, isUnborn: manualIsUnborn, gestationWeeks } = req.body;
      
      if (!name.trim()) {
        return res.status(400).json({
          success: false,
          message: 'El nombre del ni√±o es requerido'
        });
      }

      if (manualIsUnborn && !gestationWeeks) {
        return res.status(400).json({
          success: false,
          message: 'Para ni√±os por nacer, las semanas de gestaci√≥n son requeridas'
        });
      }

      if (!manualIsUnborn && !ageInMonths && ageInMonths !== 0) {
        return res.status(400).json({
          success: false,
          message: 'Para ni√±os nacidos, la edad en meses es requerida'
        });
      }

      currentAgeInMonths = manualIsUnborn ? null : ageInMonths;
      currentGestationWeeks = manualIsUnborn ? gestationWeeks : null;
      isUnborn = manualIsUnborn;
      
      console.log(`üìä [DEVELOPMENT] ${name}: ${isUnborn ? currentGestationWeeks + ' semanas' : currentAgeInMonths + ' meses'} (manual)`);
    } else {
      return res.status(400).json({
        success: false,
        message: 'Se requiere childId o nombre del ni√±o'
      });
    }

    // Crear clave √∫nica para el historial
    const childKey = child ? `${child.id}_${isUnborn ? 'unborn' : 'born'}` : `${name.trim()}_${isUnborn ? 'unborn' : 'born'}`;
    const previousResponses = await getPreviousDevelopmentResponses(userId, childKey);

    // Obtener informaci√≥n variada desde OpenAI
    let developmentInfo = [];
    if (isUnborn) {
      developmentInfo = await getUnbornDevelopmentInfoFromAI(currentGestationWeeks, previousResponses, child ? child.name : name.trim());
    } else {
      developmentInfo = await getChildDevelopmentInfoFromAI(currentAgeInMonths, previousResponses, child ? child.name : name.trim());
    }

    // Guardar esta respuesta para futuras consultas
    await saveDevelopmentResponse(userId, childKey, {
      childName: child ? child.name : name.trim(),
      childId: child ? child.id : null,
      ageInMonths: currentAgeInMonths,
      gestationWeeks: currentGestationWeeks,
      isUnborn: isUnborn,
      developmentInfo: developmentInfo,
      timestamp: new Date()
    });

    res.json({
      success: true,
      data: {
        childName: child ? child.name : name.trim(),
        childId: child ? child.id : null,
        ageInMonths: currentAgeInMonths,
        gestationWeeks: currentGestationWeeks,
        isUnborn: isUnborn,
        developmentInfo: developmentInfo,
        timestamp: new Date(),
        responseCount: previousResponses.length + 1,
        isNewInfo: previousResponses.length === 0,
        calculatedAge: true,
        // Informaci√≥n detallada de edades
        registeredAge: child ? (child.isUnborn ? childInfo.registeredGestationWeeks : childInfo.registeredAgeInMonths) : null,
        currentAge: child ? (child.isUnborn ? childInfo.currentGestationWeeks : childInfo.currentAgeInMonths) : null,
        daysSinceCreation: child ? childInfo.daysSinceCreation : null,
        // Informaci√≥n adicional para beb√©s por nacer
        isOverdue: child ? childInfo.isOverdue : false,
        // Informaci√≥n de c√°lculo
        calculationInfo: child ? {
          registeredWeeks: child.isUnborn ? childInfo.registeredGestationWeeks : null,
          registeredMonths: child.isUnborn ? null : childInfo.registeredAgeInMonths,
          currentWeeks: child.isUnborn ? childInfo.currentGestationWeeks : null,
          currentMonths: child.isUnborn ? null : childInfo.currentAgeInMonths,
          daysSinceCreation: childInfo.daysSinceCreation
        } : null
      }
    });

  } catch (error) {
    console.error('‚ùå Error obteniendo informaci√≥n de desarrollo:', error);
    res.status(500).json({
      success: false,
      message: 'Error obteniendo informaci√≥n de desarrollo',
      error: error.message
    });
  }
});

// Funci√≥n para calcular edad actual basada en fecha de creaci√≥n
const calculateCurrentAge = (registeredAge, createdAt) => {
  const now = new Date();
  
  // Manejar Timestamp de Firestore
  let createdDate;
  if (createdAt && typeof createdAt === 'object' && createdAt._seconds) {
    // Es un Timestamp de Firestore
    createdDate = new Date(createdAt._seconds * 1000);
  } else {
    // Es una fecha normal
    createdDate = new Date(createdAt);
  }
  
  const diffTime = now - createdDate;
  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  
  // Calcular meses completos transcurridos
  const diffMonths = Math.floor(diffDays / 30.44); // Promedio de d√≠as por mes
  
  // Calcular edad actual sumando los meses transcurridos
  const currentAge = Math.max(0, registeredAge + diffMonths);
  
  console.log(`üìä [AGE CALCULATION] ${registeredAge} meses + ${diffMonths} meses = ${currentAge} meses (${diffDays} d√≠as desde creaci√≥n)`);
  
  return currentAge;
};

// Funci√≥n para calcular semanas de gestaci√≥n actual basada en fecha de creaci√≥n
const calculateCurrentGestationWeeks = (registeredWeeks, createdAt) => {
  const now = new Date();
  
  // Manejar Timestamp de Firestore
  let createdDate;
  if (createdAt && typeof createdAt === 'object' && createdAt._seconds) {
    // Es un Timestamp de Firestore
    createdDate = new Date(createdAt._seconds * 1000);
  } else {
    // Es una fecha normal
    createdDate = new Date(createdAt);
  }
  
  const diffTime = now - createdDate;
  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  const diffWeeks = Math.floor(diffDays / 7);
  
  // Calcular semanas actuales sumando las semanas transcurridas
  const currentWeeks = registeredWeeks + diffWeeks;
  
  // Limitar a un rango realista (4-42 semanas)
  const finalWeeks = Math.max(4, Math.min(42, currentWeeks));
  
  console.log(`üìä [GESTATION CALCULATION] ${registeredWeeks} semanas + ${diffWeeks} semanas = ${finalWeeks} semanas (${diffDays} d√≠as desde creaci√≥n)`);
  
  return finalWeeks;
};

// Funci√≥n para obtener informaci√≥n actualizada de un hijo
const getChildCurrentInfo = (child) => {
  const now = new Date();
  
  // Manejar Timestamp de Firestore para daysSinceCreation
  let createdDate;
  if (child.createdAt && typeof child.createdAt === 'object' && child.createdAt._seconds) {
    // Es un Timestamp de Firestore
    createdDate = new Date(child.createdAt._seconds * 1000);
  } else {
    // Es una fecha normal
    createdDate = new Date(child.createdAt);
  }
  
  if (child.isUnborn) {
    const currentGestationWeeks = calculateCurrentGestationWeeks(child.gestationWeeks, child.createdAt);
    const daysSinceCreation = Math.floor((now - createdDate) / (1000 * 60 * 60 * 24));
    
    return {
      ...child,
      currentGestationWeeks: currentGestationWeeks,
      currentAgeInMonths: null,
      registeredGestationWeeks: child.gestationWeeks,
      daysSinceCreation: daysSinceCreation,
      isOverdue: currentGestationWeeks >= 40
    };
  } else {
    const currentAgeInMonths = calculateCurrentAge(child.ageInMonths, child.createdAt);
    const daysSinceCreation = Math.floor((now - createdDate) / (1000 * 60 * 60 * 24));
    
    return {
      ...child,
      currentAgeInMonths: currentAgeInMonths,
      currentGestationWeeks: null,
      registeredAgeInMonths: child.ageInMonths,
      daysSinceCreation: daysSinceCreation
    };
  }
};

// Funci√≥n para obtener respuestas previas de desarrollo
const getPreviousDevelopmentResponses = async (userId, childKey) => {
  try {
    const response = await db.collection('development_responses')
      .doc(userId)
      .collection('children')
      .doc(childKey)
      .collection('responses')
      .orderBy('timestamp', 'desc')
      .limit(10)
      .get();

    return response.docs.map(doc => doc.data());
  } catch (error) {
    console.error('Error obteniendo respuestas previas:', error);
    return [];
  }
};

// Funci√≥n para guardar respuesta de desarrollo
const saveDevelopmentResponse = async (userId, childKey, responseData) => {
  try {
    await db.collection('development_responses')
      .doc(userId)
      .collection('children')
      .doc(childKey)
      .collection('responses')
      .add({
        ...responseData,
        savedAt: new Date()
      });
  } catch (error) {
    console.error('Error guardando respuesta:', error);
  }
};

// Funci√≥n para validar que las respuestas no se repitan
const validateResponseUniqueness = (newBullets, previousResponses, maxAttempts = 3) => {
  if (previousResponses.length === 0) {
    return { isValid: true, bullets: newBullets };
  }

  // Extraer todos los bullets previos
  const allPreviousBullets = previousResponses.flatMap(resp => resp.developmentInfo);
  
  // Funci√≥n para calcular similitud entre dos bullets
  const calculateSimilarity = (bullet1, bullet2) => {
    const words1 = bullet1.toLowerCase().split(/\s+/);
    const words2 = bullet2.toLowerCase().split(/\s+/);
    const commonWords = words1.filter(word => words2.includes(word));
    return commonWords.length / Math.max(words1.length, words2.length);
  };

  // Verificar si hay repeticiones significativas
  let hasRepetition = false;
  for (const newBullet of newBullets) {
    for (const prevBullet of allPreviousBullets) {
      const similarity = calculateSimilarity(newBullet, prevBullet);
      if (similarity > 0.6) { // Si m√°s del 60% de las palabras son iguales
        hasRepetition = true;
        console.log(`‚ö†Ô∏è Detected repetition: "${newBullet.substring(0, 50)}..." similar to "${prevBullet.substring(0, 50)}..." (${(similarity * 100).toFixed(1)}%)`);
        break;
      }
    }
    if (hasRepetition) break;
  }

  return { isValid: !hasRepetition, bullets: newBullets };
};

// Funci√≥n para obtener informaci√≥n de desarrollo de beb√©s por nacer desde OpenAI
const getUnbornDevelopmentInfoFromAI = async (gestationWeeks, previousResponses, childName) => {
  try {
    let attempts = 0;
    const maxAttempts = 3;

    while (attempts < maxAttempts) {
      attempts++;
      console.log(`ü§ñ [OPENAI] Intento ${attempts}/${maxAttempts} para ${childName} (${gestationWeeks} semanas)`);

      // Crear contexto de respuestas previas
      const previousContext = previousResponses.length > 0 
        ? `\n\nInformaci√≥n ya proporcionada anteriormente:\n${previousResponses.slice(0, 3).map((resp, index) => 
            `${index + 1}. ${resp.developmentInfo.join('\n   ')}`
          ).join('\n')}`
        : '';

      const systemPrompt = `Eres una doula experta especializada en desarrollo fetal. Tu tarea es proporcionar informaci√≥n relevante y variada sobre el desarrollo del beb√© durante el embarazo.

IMPORTANTE:
- Proporciona EXACTAMENTE 3 bullets de informaci√≥n
- Cada bullet debe ser COMPLETAMENTE DIFERENTE a la informaci√≥n previa
- Evita repetir conceptos, temas o informaci√≥n ya proporcionada
- Usa emojis relevantes al inicio de cada bullet
- Mant√©n un tono c√°lido y profesional
- Incluye el nombre del beb√© cuando sea apropiado
- Si es la consulta #${previousResponses.length + 1}, enf√≥cate en aspectos NO mencionados anteriormente

FORMATO REQUERIDO:
1. ü´Ä **T√≠tulo del primer aspecto**: Descripci√≥n detallada...
2. üß¨ **T√≠tulo del segundo aspecto**: Descripci√≥n detallada...
3. ‚ö†Ô∏è **T√≠tulo del tercer aspecto**: Descripci√≥n detallada...

CONTEXTO ACTUAL:
- Beb√©: ${childName}
- Semanas de gestaci√≥n: ${gestationWeeks}
- Consulta #${previousResponses.length + 1}${previousContext}

${previousResponses.length > 0 ? 'IMPORTANTE: NO repitas ning√∫n concepto, tema o informaci√≥n de las consultas anteriores. Busca aspectos completamente nuevos.' : 'Si es la primera consulta, proporciona informaci√≥n fundamental.'}`;

      const userPrompt = `Proporciona 3 bullets de informaci√≥n √öNICA sobre el desarrollo fetal de ${childName} a las ${gestationWeeks} semanas de gestaci√≥n.`;

      const response = await openai.chat.completions.create({
        model: 'gpt-3.5-turbo',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: userPrompt }
        ],
        max_tokens: 500,
        temperature: 0.8 + (attempts * 0.1), // Aumentar temperatura en cada intento
        presence_penalty: 0.8 + (attempts * 0.1), // Aumentar penalty en cada intento
        frequency_penalty: 0.9 + (attempts * 0.05)
      });

      const content = response.choices[0].message.content;
      
      // Extraer los 3 bullets del contenido
      const bullets = content.split('\n')
        .filter(line => line.trim().match(/^\d+\.\s*[ü´Äüß¨‚ö†Ô∏èüë∂üëÇüìèüéµü´ÅüëÅÔ∏èüí™üß†üí§üçéüéØüì¶‚è∞ü§±üè•üë∂]/))
        .map(line => line.replace(/^\d+\.\s*/, '').trim())
        .slice(0, 3);

      // Si no se pudieron extraer bullets, usar fallback
      if (bullets.length < 3) {
        console.log('‚ö†Ô∏è No se pudieron extraer bullets de OpenAI, usando fallback');
        return getUnbornDevelopmentInfoFallback(gestationWeeks);
      }

      // Validar que no haya repeticiones
      const validation = validateResponseUniqueness(bullets, previousResponses);
      
      if (validation.isValid) {
        console.log(`‚úÖ [OPENAI] Respuesta v√°lida obtenida en intento ${attempts}`);
        return validation.bullets;
      } else {
        console.log(`‚ö†Ô∏è [OPENAI] Respuesta con repeticiones detectada, reintentando...`);
        if (attempts < maxAttempts) {
          await new Promise(resolve => setTimeout(resolve, 1000)); // Esperar antes del siguiente intento
        }
      }
    }

    // Si se agotaron los intentos, usar fallback
    console.log(`‚ö†Ô∏è [OPENAI] Se agotaron los intentos, usando fallback`);
    return getUnbornDevelopmentInfoFallback(gestationWeeks);

  } catch (error) {
    console.error('‚ùå Error obteniendo informaci√≥n de OpenAI:', error);
    // Fallback a informaci√≥n predefinida
    return getUnbornDevelopmentInfoFallback(gestationWeeks);
  }
};

// Funci√≥n para obtener informaci√≥n de desarrollo de ni√±os nacidos desde OpenAI
const getChildDevelopmentInfoFromAI = async (ageInMonths, previousResponses, childName) => {
  try {
    let attempts = 0;
    const maxAttempts = 3;

    while (attempts < maxAttempts) {
      attempts++;
      console.log(`ü§ñ [OPENAI] Intento ${attempts}/${maxAttempts} para ${childName} (${ageInMonths} meses)`);

      // Crear contexto de respuestas previas
      const previousContext = previousResponses.length > 0 
        ? `\n\nInformaci√≥n ya proporcionada anteriormente:\n${previousResponses.slice(0, 3).map((resp, index) => 
            `${index + 1}. ${resp.developmentInfo.join('\n   ')}`
          ).join('\n')}`
        : '';

      const systemPrompt = `Eres una doula experta especializada en desarrollo infantil. Tu tarea es proporcionar informaci√≥n relevante y variada sobre el desarrollo del ni√±o.

IMPORTANTE:
- Proporciona EXACTAMENTE 3 bullets de informaci√≥n
- Cada bullet debe ser COMPLETAMENTE DIFERENTE a la informaci√≥n previa
- Evita repetir conceptos, temas o informaci√≥n ya proporcionada
- Usa emojis relevantes al inicio de cada bullet
- Mant√©n un tono c√°lido y profesional
- Incluye el nombre del ni√±o cuando sea apropiado
- Si es la consulta #${previousResponses.length + 1}, enf√≥cate en aspectos NO mencionados anteriormente

FORMATO REQUERIDO:
1. üëÄ **T√≠tulo del primer aspecto**: Descripci√≥n detallada...
2. üòä **T√≠tulo del segundo aspecto**: Descripci√≥n detallada...
3. üí™ **T√≠tulo del tercer aspecto**: Descripci√≥n detallada...

CONTEXTO ACTUAL:
- Ni√±o: ${childName}
- Edad: ${ageInMonths} meses
- Consulta #${previousResponses.length + 1}${previousContext}

${previousResponses.length > 0 ? 'IMPORTANTE: NO repitas ning√∫n concepto, tema o informaci√≥n de las consultas anteriores. Busca aspectos completamente nuevos.' : 'Si es la primera consulta, proporciona informaci√≥n fundamental.'}`;

      const userPrompt = `Proporciona 3 bullets de informaci√≥n √öNICA sobre el desarrollo de ${childName} a los ${ageInMonths} meses de edad.`;

      const response = await openai.chat.completions.create({
        model: 'gpt-3.5-turbo',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: userPrompt }
        ],
        max_tokens: 500,
        temperature: 0.8 + (attempts * 0.1), // Aumentar temperatura en cada intento
        presence_penalty: 0.8 + (attempts * 0.1), // Aumentar penalty en cada intento
        frequency_penalty: 0.9 + (attempts * 0.05)
      });

      const content = response.choices[0].message.content;
      
      // Extraer los 3 bullets del contenido
      const bullets = content.split('\n')
        .filter(line => line.trim().match(/^\d+\.\s*[üëÄüòäüí™ü§±ü¶∑üîÑüé§üëêü™ëü§èüó£Ô∏èüö∂üëãüçΩÔ∏èüèÉüéØüéµüß©üé≠üìöüé®ü§ùüßÆüèÉ‚Äç‚ôÇÔ∏èüìñüî¢üéØüéìüèÉ‚Äç‚ôÇÔ∏èüß†üìöüé®üë•]/))
        .map(line => line.replace(/^\d+\.\s*/, '').trim())
        .slice(0, 3);

      // Si no se pudieron extraer bullets, usar fallback
      if (bullets.length < 3) {
        console.log('‚ö†Ô∏è No se pudieron extraer bullets de OpenAI, usando fallback');
        return getChildDevelopmentInfoFallback(ageInMonths);
      }

      // Validar que no haya repeticiones
      const validation = validateResponseUniqueness(bullets, previousResponses);
      
      if (validation.isValid) {
        console.log(`‚úÖ [OPENAI] Respuesta v√°lida obtenida en intento ${attempts}`);
        return validation.bullets;
      } else {
        console.log(`‚ö†Ô∏è [OPENAI] Respuesta con repeticiones detectada, reintentando...`);
        if (attempts < maxAttempts) {
          await new Promise(resolve => setTimeout(resolve, 1000)); // Esperar antes del siguiente intento
        }
      }
    }

    // Si se agotaron los intentos, usar fallback
    console.log(`‚ö†Ô∏è [OPENAI] Se agotaron los intentos, usando fallback`);
    return getChildDevelopmentInfoFallback(ageInMonths);

  } catch (error) {
    console.error('‚ùå Error obteniendo informaci√≥n de OpenAI:', error);
    // Fallback a informaci√≥n predefinida
    return getChildDevelopmentInfoFallback(ageInMonths);
  }
};

// Funci√≥n de fallback para informaci√≥n de beb√©s por nacer
const getUnbornDevelopmentInfoFallback = (gestationWeeks) => {
  if (gestationWeeks <= 12) {
    return [
      "ü´Ä **Desarrollo del coraz√≥n**: El coraz√≥n de tu beb√© ya late y se est√°n formando los principales √≥rganos. Es un per√≠odo cr√≠tico de desarrollo.",
      "üß¨ **Formaci√≥n de √≥rganos**: Se est√°n desarrollando el cerebro, h√≠gado, ri√±ones y otros √≥rganos vitales. La nutrici√≥n materna es fundamental.",
      "‚ö†Ô∏è **Cuidados especiales**: Evita alcohol, tabaco y medicamentos sin prescripci√≥n m√©dica. Descansa lo suficiente y mant√©n una dieta equilibrada."
    ];
  } else if (gestationWeeks <= 24) {
    return [
      "üë∂ **Movimientos fetales**: Tu beb√© ya se mueve y puedes sentir sus pataditas. Los movimientos son una se√±al de bienestar.",
      "üëÇ **Desarrollo sensorial**: Ya puede o√≠r sonidos y responde a tu voz. Hablarle y cantarle fortalece el v√≠nculo.",
      "üìè **Crecimiento acelerado**: Tu beb√© crece r√°pidamente. Mant√©n una buena nutrici√≥n y control prenatal regular."
    ];
  } else if (gestationWeeks <= 36) {
    return [
      "ü´Å **Maduraci√≥n pulmonar**: Los pulmones se est√°n preparando para respirar. El beb√© practica movimientos respiratorios.",
      "üëÅÔ∏è **Desarrollo visual**: Los ojos se abren y puede distinguir entre luz y oscuridad. Responde a est√≠mulos luminosos.",
      "üí™ **Posici√≥n de parto**: El beb√© se est√° posicionando para el nacimiento. Los movimientos pueden ser m√°s limitados."
    ];
  } else {
    return [
      "üéØ **Listo para nacer**: Tu beb√© est√° completamente desarrollado y listo para el nacimiento en cualquier momento.",
      "üì¶ **Posici√≥n final**: Probablemente est√© en posici√≥n cef√°lica (cabeza abajo) prepar√°ndose para el parto.",
      "‚è∞ **Signos de parto**: Presta atenci√≥n a contracciones regulares, rotura de aguas o p√©rdida del tap√≥n mucoso."
    ];
  }
};

// Funci√≥n de fallback para informaci√≥n de ni√±os nacidos
const getChildDevelopmentInfoFallback = (ageInMonths) => {
  if (ageInMonths <= 3) {
    return [
      "üëÄ **Desarrollo visual**: Tu beb√© puede seguir objetos con la mirada y reconoce tu rostro. El contacto visual es fundamental.",
      "üòä **Primeras sonrisas**: Aparecen las sonrisas sociales y el beb√© responde a tu voz y caricias.",
      "üí™ **Control de cabeza**: Comienza a sostener la cabeza cuando est√° boca abajo. El tiempo boca abajo es importante."
    ];
  } else if (ageInMonths <= 6) {
    return [
      "ü§± **Alimentaci√≥n complementaria**: Est√° listo para comenzar con papillas. Introduce alimentos uno por uno.",
      "ü¶∑ **Primeros dientes**: Pueden aparecer los primeros dientes. Ofrece mordedores fr√≠os para aliviar las molestias.",
      "üîÑ **Volteo**: Aprende a darse la vuelta de boca arriba a boca abajo y viceversa. Supervisa siempre."
    ];
  } else if (ageInMonths <= 9) {
    return [
      "ü™ë **Sentarse solo**: Ya puede sentarse sin apoyo y mantenerse estable. El equilibrio mejora d√≠a a d√≠a.",
      "ü§è **Pinza fina**: Desarrolla la capacidad de agarrar objetos peque√±os entre el pulgar y el √≠ndice.",
      "üó£Ô∏è **Balbuceo**: Produce sonidos como 'mam√°', 'pap√°'. Responde a su nombre y entiende palabras simples."
    ];
  } else if (ageInMonths <= 12) {
    return [
      "üö∂ **Primeros pasos**: Puede dar sus primeros pasos sosteni√©ndose de muebles o de tu mano. Cada beb√© tiene su ritmo.",
      "üëã **Gestos comunicativos**: Hace gestos como saludar, se√±alar y aplaudir. La comunicaci√≥n no verbal se desarrolla.",
      "üçΩÔ∏è **Alimentaci√≥n independiente**: Quiere comer solo y explorar texturas. Ofrece alimentos seguros y variados."
    ];
  } else if (ageInMonths <= 18) {
    return [
      "üèÉ **Caminar estable**: Ya camina con seguridad y puede subir escaleras gateando. Supervisa en todo momento.",
      "üó£Ô∏è **Primeras palabras**: Dice entre 5-20 palabras y entiende muchas m√°s. Lee cuentos y habla constantemente.",
      "üéØ **Juego simb√≥lico**: Comienza a imitar acciones como hablar por tel√©fono o dar de comer a mu√±ecos."
    ];
  } else if (ageInMonths <= 24) {
    return [
      "üí¨ **Explosi√≥n del lenguaje**: Aprende nuevas palabras cada d√≠a y forma frases de 2-3 palabras.",
      "üé® **Creatividad**: Disfruta pintar, dibujar y crear. Ofrece materiales seguros para expresarse.",
      "üë• **Socializaci√≥n**: Muestra inter√©s por otros ni√±os aunque a√∫n juega en paralelo. Las citas de juego son beneficiosas."
    ];
  } else if (ageInMonths <= 36) {
    return [
      "üß© **Pensamiento l√≥gico**: Resuelve rompecabezas simples y entiende conceptos como grande/peque√±o, arriba/abajo.",
      "üé≠ **Juego de roles**: Imita roles como ser mam√°, pap√°, doctor. El juego imaginativo se desarrolla.",
      "üéµ **Habilidades musicales**: Disfruta cantar, bailar y hacer m√∫sica. La m√∫sica estimula el desarrollo cerebral."
    ];
  } else if (ageInMonths <= 48) {
    return [
      "üìö **Preparaci√≥n escolar**: Desarrolla habilidades pre-lectura como reconocer letras y contar.",
      "üé® **Expresi√≥n art√≠stica**: Crea dibujos m√°s detallados y puede representar personas y objetos.",
      "ü§ù **Cooperaci√≥n**: Aprende a compartir, esperar turnos y seguir reglas simples en grupo."
    ];
  } else if (ageInMonths <= 60) {
    return [
      "üìñ **Lectura emergente**: Reconoce algunas palabras escritas y puede 'leer' cuentos conocidos.",
      "üî¢ **Conceptos matem√°ticos**: Cuenta hasta 10, reconoce n√∫meros y entiende conceptos b√°sicos de cantidad.",
      "üéØ **Independencia**: Se viste solo, usa el ba√±o independientemente y ayuda en tareas simples."
    ];
  } else {
    return [
      "üéì **Desarrollo escolar**: Est√° listo para el aprendizaje formal. Las habilidades sociales y acad√©micas se desarrollan.",
      "üèÉ‚Äç‚ôÇÔ∏è **Actividad f√≠sica**: Disfruta deportes y actividades f√≠sicas. El ejercicio regular es importante.",
      "üß† **Pensamiento abstracto**: Comienza a entender conceptos m√°s complejos y puede resolver problemas simples."
    ];
  }
};

// Funci√≥n para obtener informaci√≥n de desarrollo de beb√©s por nacer
const getUnbornDevelopmentInfo = (gestationWeeks) => {
  if (gestationWeeks <= 12) {
    return [
      "ü´Ä **Desarrollo del coraz√≥n**: El coraz√≥n de tu beb√© ya late y se est√°n formando los principales √≥rganos. Es un per√≠odo cr√≠tico de desarrollo.",
      "üß¨ **Formaci√≥n de √≥rganos**: Se est√°n desarrollando el cerebro, h√≠gado, ri√±ones y otros √≥rganos vitales. La nutrici√≥n materna es fundamental.",
      "‚ö†Ô∏è **Cuidados especiales**: Evita alcohol, tabaco y medicamentos sin prescripci√≥n m√©dica. Descansa lo suficiente y mant√©n una dieta equilibrada."
    ];
  } else if (gestationWeeks <= 24) {
    return [
      "üë∂ **Movimientos fetales**: Tu beb√© ya se mueve y puedes sentir sus pataditas. Los movimientos son una se√±al de bienestar.",
      "üëÇ **Desarrollo sensorial**: Ya puede o√≠r sonidos y responde a tu voz. Hablarle y cantarle fortalece el v√≠nculo.",
      "üìè **Crecimiento acelerado**: Tu beb√© crece r√°pidamente. Mant√©n una buena nutrici√≥n y control prenatal regular."
    ];
  } else if (gestationWeeks <= 36) {
    return [
      "ü´Å **Maduraci√≥n pulmonar**: Los pulmones se est√°n preparando para respirar. El beb√© practica movimientos respiratorios.",
      "üëÅÔ∏è **Desarrollo visual**: Los ojos se abren y puede distinguir entre luz y oscuridad. Responde a est√≠mulos luminosos.",
      "üí™ **Posici√≥n de parto**: El beb√© se est√° posicionando para el nacimiento. Los movimientos pueden ser m√°s limitados."
    ];
  } else {
    return [
      "üéØ **Listo para nacer**: Tu beb√© est√° completamente desarrollado y listo para el nacimiento en cualquier momento.",
      "üì¶ **Posici√≥n final**: Probablemente est√© en posici√≥n cef√°lica (cabeza abajo) prepar√°ndose para el parto.",
      "‚è∞ **Signos de parto**: Presta atenci√≥n a contracciones regulares, rotura de aguas o p√©rdida del tap√≥n mucoso."
    ];
  }
};



// Funci√≥n para obtener informaci√≥n de desarrollo de ni√±os nacidos
const getChildDevelopmentInfo = (ageInMonths) => {
  if (ageInMonths <= 3) {
    return [
      "üëÄ **Desarrollo visual**: Tu beb√© puede seguir objetos con la mirada y reconoce tu rostro. El contacto visual es fundamental.",
      "üòä **Primeras sonrisas**: Aparecen las sonrisas sociales y el beb√© responde a tu voz y caricias.",
      "üí™ **Control de cabeza**: Comienza a sostener la cabeza cuando est√° boca abajo. El tiempo boca abajo es importante."
    ];
  } else if (ageInMonths <= 6) {
    return [
      "ü§± **Alimentaci√≥n complementaria**: Est√° listo para comenzar con papillas. Introduce alimentos uno por uno.",
      "ü¶∑ **Primeros dientes**: Pueden aparecer los primeros dientes. Ofrece mordedores fr√≠os para aliviar las molestias.",
      "üîÑ **Volteo**: Aprende a darse la vuelta de boca arriba a boca abajo y viceversa. Supervisa siempre."
    ];
  } else if (ageInMonths <= 9) {
    return [
      "ü™ë **Sentarse solo**: Ya puede sentarse sin apoyo y mantenerse estable. El equilibrio mejora d√≠a a d√≠a.",
      "ü§è **Pinza fina**: Desarrolla la capacidad de agarrar objetos peque√±os entre el pulgar y el √≠ndice.",
      "üó£Ô∏è **Balbuceo**: Produce sonidos como 'mam√°', 'pap√°'. Responde a su nombre y entiende palabras simples."
    ];
  } else if (ageInMonths <= 12) {
    return [
      "üö∂ **Primeros pasos**: Puede dar sus primeros pasos sosteni√©ndose de muebles o de tu mano. Cada beb√© tiene su ritmo.",
      "üëã **Gestos comunicativos**: Hace gestos como saludar, se√±alar y aplaudir. La comunicaci√≥n no verbal se desarrolla.",
      "üçΩÔ∏è **Alimentaci√≥n independiente**: Quiere comer solo y explorar texturas. Ofrece alimentos seguros y variados."
    ];
  } else if (ageInMonths <= 18) {
    return [
      "üèÉ **Caminar estable**: Ya camina con seguridad y puede subir escaleras gateando. Supervisa en todo momento.",
      "üó£Ô∏è **Primeras palabras**: Dice entre 5-20 palabras y entiende muchas m√°s. Lee cuentos y habla constantemente.",
      "üéØ **Juego simb√≥lico**: Comienza a imitar acciones como hablar por tel√©fono o dar de comer a mu√±ecos."
    ];
  } else if (ageInMonths <= 24) {
    return [
      "üí¨ **Explosi√≥n del lenguaje**: Aprende nuevas palabras cada d√≠a y forma frases de 2-3 palabras.",
      "üé® **Creatividad**: Disfruta pintar, dibujar y crear. Ofrece materiales seguros para expresarse.",
      "üë• **Socializaci√≥n**: Muestra inter√©s por otros ni√±os aunque a√∫n juega en paralelo. Las citas de juego son beneficiosas."
    ];
  } else if (ageInMonths <= 36) {
    return [
      "üß© **Pensamiento l√≥gico**: Resuelve rompecabezas simples y entiende conceptos como grande/peque√±o, arriba/abajo.",
      "üé≠ **Juego de roles**: Imita roles como ser mam√°, pap√°, doctor. El juego imaginativo se desarrolla.",
      "üéµ **Habilidades musicales**: Disfruta cantar, bailar y hacer m√∫sica. La m√∫sica estimula el desarrollo cerebral."
    ];
  } else if (ageInMonths <= 48) {
    return [
      "üìö **Preparaci√≥n escolar**: Desarrolla habilidades pre-lectura como reconocer letras y contar.",
      "üé® **Expresi√≥n art√≠stica**: Crea dibujos m√°s detallados y puede representar personas y objetos.",
      "ü§ù **Cooperaci√≥n**: Aprende a compartir, esperar turnos y seguir reglas simples en grupo."
    ];
  } else if (ageInMonths <= 60) {
    return [
      "üìñ **Lectura emergente**: Reconoce algunas palabras escritas y puede 'leer' cuentos conocidos.",
      "üî¢ **Conceptos matem√°ticos**: Cuenta hasta 10, reconoce n√∫meros y entiende conceptos b√°sicos de cantidad.",
      "üéØ **Independencia**: Se viste solo, usa el ba√±o independientemente y ayuda en tareas simples."
    ];
  } else {
    return [
      "üéì **Desarrollo escolar**: Est√° listo para el aprendizaje formal. Las habilidades sociales y acad√©micas se desarrollan.",
      "üèÉ‚Äç‚ôÇÔ∏è **Actividad f√≠sica**: Disfruta deportes y actividades f√≠sicas. El ejercicio regular es importante.",
      "üß† **Pensamiento abstracto**: Comienza a entender conceptos m√°s complejos y puede resolver problemas simples."
    ];
  }
};

// Endpoint para obtener informaci√≥n actualizada de hijos
app.get('/api/auth/children/current-info', authenticateToken, async (req, res) => {
  try {
    const { uid } = req.user;

    if (!db) {
      return res.status(500).json({
        success: false,
        message: 'Base de datos no disponible'
      });
    }

    // Obtener todos los hijos del usuario
    const childrenSnapshot = await db.collection('children')
      .where('parentId', '==', uid)
      .get();

    const children = [];
    childrenSnapshot.forEach(doc => {
      const childData = doc.data();
      const currentInfo = getChildCurrentInfo(childData);
      
              children.push({
          id: doc.id,
          ...currentInfo,
          // Informaci√≥n adicional calculada
          createdDate: childData.createdAt,
          daysSinceCreation: currentInfo.daysSinceCreation,
          isOverdue: currentInfo.isOverdue || false
        });
    });

    res.json({
      success: true,
      data: {
        children: children,
        totalChildren: children.length,
        timestamp: new Date()
      }
    });

  } catch (error) {
    console.error('‚ùå Error obteniendo informaci√≥n actualizada de hijos:', error);
    res.status(500).json({
      success: false,
      message: 'Error obteniendo informaci√≥n de hijos',
      error: error.message
    });
  }
});

// Endpoint para limpiar historial de respuestas de desarrollo
app.delete('/api/children/development-history', authenticateToken, async (req, res) => {
  try {
    const { childName, ageInMonths, isUnborn = false } = req.body;
    const userId = req.user.uid;

    if (!childName || !childName.trim()) {
      return res.status(400).json({
        success: false,
        message: 'El nombre del ni√±o es requerido'
      });
    }

    const childKey = `${childName.trim()}_${isUnborn ? 'unborn' : ageInMonths}months`;

    // Obtener todas las respuestas para este ni√±o
    const responsesRef = db.collection('development_responses')
      .doc(userId)
      .collection('children')
      .doc(childKey)
      .collection('responses');

    const responses = await responsesRef.get();

    // Eliminar todas las respuestas
    const batch = db.batch();
    responses.docs.forEach(doc => {
      batch.delete(doc.ref);
    });

    await batch.commit();

    res.json({
      success: true,
      message: 'Historial de respuestas eliminado',
      data: {
        childName: childName.trim(),
        deletedCount: responses.docs.length
      }
    });

  } catch (error) {
    console.error('‚ùå Error eliminando historial:', error);
    res.status(500).json({
      success: false,
      message: 'Error eliminando historial',
      error: error.message
    });
  }
});
// Endpoint para obtener tips personalizados de los hijos
app.post('/api/children/tips', authenticateToken, async (req, res) => {
  try {
    const { uid } = req.user;
    const { tipType = 'general' } = req.body; // general, alimentacion, desarrollo, salud, etc.

    if (!db) {
      return res.status(500).json({
        success: false,
        message: 'Base de datos no disponible'
      });
    }

    // Obtener informaci√≥n actualizada de los hijos
    const childrenSnapshot = await db.collection('children')
      .where('parentId', '==', uid)
      .orderBy('createdAt', 'desc')
      .get();

    if (childrenSnapshot.empty) {
      return res.status(404).json({
        success: false,
        message: 'No tienes hijos registrados'
      });
    }

    const children = [];
    childrenSnapshot.forEach(doc => {
      const childData = doc.data();
      const currentInfo = getChildCurrentInfo(childData);
      children.push({
        id: doc.id,
        name: childData.name,
        ageInMonths: childData.ageInMonths,
        currentAgeInMonths: currentInfo.currentAgeInMonths,
        isUnborn: childData.isUnborn,
        gestationWeeks: childData.gestationWeeks,
        currentGestationWeeks: currentInfo.currentGestationWeeks,
        daysSinceCreation: currentInfo.daysSinceCreation
      });
    });

    // Crear contexto para OpenAI
    const childrenContext = children.map(child => {
      if (child.isUnborn) {
        return `${child.name}: Por nacer, ${child.currentGestationWeeks} semanas de gestaci√≥n`;
      } else {
        const years = Math.floor(child.currentAgeInMonths / 12);
        const months = child.currentAgeInMonths % 12;
        const ageText = years > 0 
          ? `${years} a√±o${years > 1 ? 's' : ''}${months > 0 ? ` y ${months} mes${months > 1 ? 'es' : ''}` : ''}`
          : `${months} mes${months > 1 ? 'es' : ''}`;
        return `${child.name}: ${ageText} de edad`;
      }
    }).join(', ');

    // Generar tips usando OpenAI
    let tips = [];
    if (openai) {
      try {
        const prompt = `Eres una doula experta llamada "Douli". Necesito que generes 3-5 tips cortos y √∫tiles para una madre/padre bas√°ndote en la informaci√≥n de sus hijos.

INFORMACI√ìN DE LOS HIJOS:
${childrenContext}

TIPO DE TIP SOLICITADO: ${tipType}

REQUISITOS:
- Tips cortos (m√°ximo 2 l√≠neas cada uno)
- Espec√≠ficos para la edad/gestaci√≥n de los hijos
- Pr√°cticos y accionables
- En espa√±ol
- Formato: emoji + texto corto
- Relacionados con el tipo solicitado

Ejemplos de tipos:
- general: consejos generales de crianza
- alimentacion: consejos de alimentaci√≥n
- desarrollo: hitos de desarrollo
- salud: consejos de salud
- sue√±o: consejos de sue√±o
- actividades: actividades recomendadas

Genera solo los tips, sin explicaciones adicionales.`;

        const completion = await openai.chat.completions.create({
          model: "gpt-3.5-turbo",
          messages: [
            {
              role: "system",
              content: "Eres una doula experta y compasiva que da consejos pr√°cticos y √∫tiles para padres."
            },
            {
              role: "user",
              content: prompt
            }
          ],
          max_tokens: 300,
          temperature: 0.7
        });

        const response = completion.choices[0].message.content;
        tips = response.split('\n').filter(tip => tip.trim().length > 0);

      } catch (openaiError) {
        console.error('‚ùå Error con OpenAI:', openaiError.message);
        // Fallback con tips predefinidos
        tips = generateFallbackTips(children, tipType);
      }
    } else {
      // Fallback si OpenAI no est√° disponible
      tips = generateFallbackTips(children, tipType);
    }

    res.json({
      success: true,
      data: {
        tips: tips,
        children: children.map(child => ({
          id: child.id,
          name: child.name,
          currentAge: child.isUnborn ? `${child.currentGestationWeeks} semanas` : `${child.currentAgeInMonths} meses`,
          isUnborn: child.isUnborn
        })),
        tipType: tipType,
        timestamp: new Date()
      }
    });

  } catch (error) {
    console.error('‚ùå Error obteniendo tips:', error);
    res.status(500).json({
      success: false,
      message: 'Error obteniendo tips',
      error: error.message
    });
  }
});

// Funci√≥n para generar tips de fallback
function generateFallbackTips(children, tipType) {
  const tips = [];
  
  children.forEach(child => {
    if (tipType === 'general' || tipType === 'desarrollo') {
      if (child.isUnborn) {
        if (child.currentGestationWeeks >= 40) {
          tips.push('ü§∞ ¬°Tu beb√© est√° listo para nacer! Mant√©n la calma y conf√≠a en tu cuerpo.');
        } else if (child.currentGestationWeeks >= 37) {
          tips.push('üë∂ A partir de las 37 semanas tu beb√© ya no es prematuro. ¬°Est√°s en la recta final!');
        } else if (child.currentGestationWeeks >= 28) {
          tips.push('üíï Tu beb√© ya puede so√±ar y reconocer tu voz. Habla con √©l/ella todos los d√≠as.');
        }
      } else {
        if (child.currentAgeInMonths <= 6) {
          tips.push('üçº La leche materna es el mejor alimento para tu beb√©. Amamanta a demanda.');
        } else if (child.currentAgeInMonths <= 12) {
          tips.push('ü•Ñ Introduce alimentos s√≥lidos gradualmente. Un alimento nuevo cada 3-4 d√≠as.');
        } else if (child.currentAgeInMonths <= 24) {
          tips.push('üö∂ Tu peque√±o est√° explorando el mundo. Mant√©n tu casa segura para ni√±os.');
        } else if (child.currentAgeInMonths <= 36) {
          tips.push('üé® Fomenta la creatividad con dibujos, manualidades y juegos imaginativos.');
        } else {
          tips.push('üìö Lee cuentos juntos. Es una excelente manera de fortalecer el v√≠nculo.');
        }
      }
    } else if (tipType === 'alimentacion') {
      if (!child.isUnborn) {
        if (child.currentAgeInMonths <= 6) {
          tips.push('ü§± Amamanta exclusivamente hasta los 6 meses. No necesita agua ni otros alimentos.');
        } else if (child.currentAgeInMonths <= 12) {
          tips.push('ü•ë Introduce frutas y verduras de colores variados para una nutrici√≥n completa.');
        } else if (child.currentAgeInMonths <= 24) {
          tips.push('ü•õ Ofrece 3 comidas principales y 2-3 refrigerios saludables al d√≠a.');
        } else {
          tips.push('üçé Incluye prote√≠nas magras, granos enteros y muchas frutas y verduras.');
        }
      }
    } else if (tipType === 'salud') {
      if (!child.isUnborn) {
        if (child.currentAgeInMonths <= 12) {
          tips.push('üíâ Mant√©n al d√≠a el calendario de vacunaci√≥n. Es fundamental para su salud.');
        } else if (child.currentAgeInMonths <= 24) {
          tips.push('ü¶∑ Cepilla sus dientes 2 veces al d√≠a con pasta dental con fl√∫or.');
        } else {
          tips.push('üèÉ Fomenta al menos 1 hora de actividad f√≠sica diaria para un desarrollo saludable.');
        }
      }
    } else if (tipType === 'sue√±o') {
      if (!child.isUnborn) {
        if (child.currentAgeInMonths <= 6) {
          tips.push('üò¥ Los beb√©s necesitan 14-17 horas de sue√±o total al d√≠a. Respeta sus ritmos.');
        } else if (child.currentAgeInMonths <= 12) {
          tips.push('üåô Establece una rutina de sue√±o consistente: ba√±o, cuento y cuna a la misma hora.');
        } else if (child.currentAgeInMonths <= 24) {
          tips.push('üõèÔ∏è Los ni√±os de 1-2 a√±os necesitan 11-14 horas de sue√±o, incluyendo 1-2 siestas.');
        } else {
          tips.push('üí§ Los ni√±os de 3-5 a√±os necesitan 10-13 horas de sue√±o. Mant√©n horarios regulares.');
        }
      }
    } else if (tipType === 'actividades') {
      if (!child.isUnborn) {
        if (child.currentAgeInMonths <= 6) {
          tips.push('üéµ Canta canciones y haz movimientos r√≠tmicos. Estimula su desarrollo auditivo y motor.');
        } else if (child.currentAgeInMonths <= 12) {
          tips.push('üß∏ Juega a esconder objetos. Desarrolla su memoria y comprensi√≥n de permanencia.');
        } else if (child.currentAgeInMonths <= 24) {
          tips.push('üèóÔ∏è Construye torres con bloques. Mejora su coordinaci√≥n y pensamiento espacial.');
        } else {
          tips.push('üé≠ Juega a disfrazarse. Fomenta la imaginaci√≥n y la expresi√≥n creativa.');
        }
      }
    }
  });

  // Si no hay tips espec√≠ficos, agregar tips generales
  if (tips.length === 0) {
    tips.push('üíï Cada hijo es √∫nico. Conf√≠a en tu instinto maternal/paternal.');
    tips.push('ü§ó El amor y la paciencia son los mejores ingredientes para criar ni√±os felices.');
    tips.push('üì± Limita el tiempo de pantalla y prioriza el juego activo y la interacci√≥n.');
  }

  return tips.slice(0, 5); // M√°ximo 5 tips
}

// Endpoint para actualizar el nombre del usuario
app.put('/api/auth/update-name', authenticateToken, async (req, res) => {
  try {
    const { uid } = req.user;
    const { displayName } = req.body;

    if (!displayName || displayName.trim() === '') {
      return res.status(400).json({
        success: false,
        message: 'El nombre es requerido'
      });
    }

    if (!auth || !db) {
      return res.status(500).json({
        success: false,
        message: 'Servicios no disponibles'
      });
    }

    console.log('üìù Actualizando nombre del usuario:', uid, 'Nuevo nombre:', displayName);

    // Actualizar en Firebase Auth
    await auth.updateUser(uid, {
      displayName: displayName.trim()
    });

    // Actualizar en Firestore
    await db.collection('users').doc(uid).update({
      displayName: displayName.trim(),
      updatedAt: new Date()
    });

    console.log('‚úÖ Nombre actualizado correctamente');

    res.json({
      success: true,
      message: 'Nombre actualizado correctamente',
      data: {
        displayName: displayName.trim()
      }
    });

  } catch (error) {
    console.error('‚ùå Error actualizando nombre:', error);
    res.status(500).json({
      success: false,
      message: 'Error al actualizar el nombre',
      error: error.message
    });
  }
});

// Middleware de manejo de errores
app.use((err, req, res, next) => {
  console.error('Error no manejado:', err);
  res.status(500).json({
    success: false,
    message: 'Error interno del servidor',
    error: process.env.NODE_ENV === 'development' ? err.message : 'Algo sali√≥ mal'
  });
});



// Middleware para rutas no encontradas
app.use('*', (req, res) => {
  res.status(404).json({
    success: false,
    message: 'Ruta no encontrada',
    path: req.originalUrl
  });
});

// Iniciar servidor
app.listen(PORT, () => {
  console.log(`üöÄ Servidor corriendo en puerto ${PORT}`);
  console.log(`üì± Ambiente: ${process.env.NODE_ENV || 'development'}`);
  console.log(`üîó URL: http://localhost:${PORT}`);
  console.log(`üî• Firebase: ${firebaseStatus}`);
});

// Manejo de se√±ales para cierre graceful
process.on('SIGTERM', () => {
  console.log('SIGTERM recibido, cerrando servidor...');
  process.exit(0);
});

process.on('SIGINT', () => {
  console.log('SIGINT recibido, cerrando servidor...');
  process.exit(0);
});

module.exports = app;

// ===== SISTEMA DE APRENDIZAJE CONTINUO (RAG) =====

// Funci√≥n para guardar conocimiento en el vector store (simulado en Firestore)
const saveKnowledge = async (text, metadata = {}) => {
  try {
    if (!db) return false;
    
    const knowledgeDoc = {
      text: text,
      metadata: {
        source: metadata.source || 'manual',
        topic: metadata.topic || 'general',
        stage: metadata.stage || 'general', // embarazo|posparto|lactancia|general
        version: metadata.version || '1.0',
        language: metadata.language || 'es',
        createdBy: metadata.createdBy || 'system',
        createdAt: new Date(),
        qualityScore: metadata.qualityScore || 1.0
      },
      // Simulaci√≥n de embedding (en producci√≥n usar√≠as un servicio real)
      embedding: [0.1, 0.2, 0.3], // Placeholder
      isActive: true
    };
    
    await db.collection('knowledge_base').add(knowledgeDoc);
    console.log('üíæ [RAG] Conocimiento guardado:', metadata.topic);
    return true;
  } catch (error) {
    console.error('‚ùå [RAG] Error guardando conocimiento:', error);
    return false;
  }
};

// Funci√≥n para recuperar conocimiento relevante
const retrieveKnowledge = async (query, filters = {}) => {
  try {
    if (!db) return [];
    
    let queryRef = db.collection('knowledge_base').where('isActive', '==', true);
    
    // Aplicar filtros
    if (filters.stage) {
      queryRef = queryRef.where('metadata.stage', '==', filters.stage);
    }
    if (filters.topic) {
      queryRef = queryRef.where('metadata.topic', '==', filters.topic);
    }
    if (filters.language) {
      queryRef = queryRef.where('metadata.language', '==', filters.language);
    }
    
    const snapshot = await queryRef.orderBy('metadata.qualityScore', 'desc').limit(5).get();
    
    const knowledge = [];
    snapshot.forEach(doc => {
      knowledge.push({
        id: doc.id,
        ...doc.data()
      });
    });
    
    console.log('üîç [RAG] Conocimiento recuperado:', knowledge.length, 'fragmentos');
    return knowledge;
  } catch (error) {
    console.error('‚ùå [RAG] Error recuperando conocimiento:', error);
    return [];
  }
};

// Funci√≥n para guardar memoria del usuario
const saveUserMemory = async (userId, memoryData) => {
  try {
    if (!db) return false;
    
    const memoryDoc = {
      userId: userId,
      profile: memoryData.profile || {},
      notes: memoryData.notes || [],
      preferences: memoryData.preferences || {},
      lastUpdated: new Date()
    };
    
    await db.collection('user_memory').doc(userId).set(memoryDoc, { merge: true });
    console.log('üíæ [MEMORY] Memoria guardada para usuario:', userId);
    return true;
  } catch (error) {
    console.error('‚ùå [MEMORY] Error guardando memoria:', error);
    return false;
  }
};

// Funci√≥n para obtener memoria del usuario
const getUserMemory = async (userId) => {
  try {
    if (!db) return null;
    
    const memoryDoc = await db.collection('user_memory').doc(userId).get();
    
    if (memoryDoc.exists) {
      console.log('üîç [MEMORY] Memoria recuperada para usuario:', userId);
      return memoryDoc.data();
    }
    
    return null;
  } catch (error) {
    console.error('‚ùå [MEMORY] Error obteniendo memoria:', error);
    return null;
  }
};

// Funci√≥n para guardar Q&A validado
const saveValidatedQA = async (question, answer, tags = [], qualityScore = 1.0) => {
  try {
    if (!db) return false;
    
    const qaDoc = {
      question: question,
      answer: answer,
      tags: tags,
      qualityScore: qualityScore,
      createdAt: new Date(),
      isActive: true,
      usageCount: 0
    };
    
    await db.collection('validated_qa').add(qaDoc);
    console.log('üíæ [QA] Q&A validado guardado');
    return true;
  } catch (error) {
    console.error('‚ùå [QA] Error guardando Q&A:', error);
    return false;
  }
};

// Funci√≥n para guardar feedback del usuario
const saveFeedback = async (userId, conversationId, feedback) => {
  try {
    if (!db) return false;
    
    const feedbackDoc = {
      userId: userId,
      conversationId: conversationId,
      feedback: feedback, // 'positive' | 'negative'
      timestamp: new Date(),
      processed: false
    };
    
    await db.collection('user_feedback').add(feedbackDoc);
    console.log('üíæ [FEEDBACK] Feedback guardado:', feedback);
    return true;
  } catch (error) {
    console.error('‚ùå [FEEDBACK] Error guardando feedback:', error);
    return false;
  }
};


